@InBook{Peano:1889,
  author    = {Giuseppe Peano},
  title     = {From Frege to G\"odel (A source book in mathematical 
               logic, 1879--1931)},
  chapter   = {The principles of arithmetic, presented by a new 
               method},
  publisher = {Harvard University Press},
  year      = 1976,
  edition   = {third},
  pages     = {83--97},
  note      = {Originally published in \oldstylenums{1889}}
}

@InBook{Skolem:1923,
  author    = {Thoralf Skolem},
  title     = {From Frege to G\"odel (A source book in mathematical
               logic, 1879--1931)},
  chapter   = {The foundation of elementary arithmetic established by
               means of the recursive mode of thought, without the
               use of apparent variables ranging over infinite
               domains},
  publisher = {Harvard University Press},
  year      = 1976,
  edition   = {third},
  pages     = {302--333},
  note      = {Originally published in \oldstylenums{1923}},
  summary   = {This article introduces a new foundation for a part of
               arithmetic which does not rely on existentials over
               infinite domains: recursive primitive functions.}
}

@Article{Robinson:1947,
  author  = {Raphael M. Robinson},
  title   = {Primitive recursive functions},
  journal = {Bulletin of the American Mathematical Society},
  year    = 1947,
  volume  = 53,
  number  = 10,
  pages   = {925--942}
}

@Article{Robinson:1948,
  author  = {Raphael M. Robinson},
  title   = {Recursion and double recursion},
  journal = {Bulletin of the American Mathematical Society},
  year    = 1948,
  volume  = 54,
  number  = 10,
  pages   = {987--993}
}

@Article{McCarthy:1960,
  author  = {John McCarthy},
  title   = {Recursive functions of symbolic expressions and
             their computation by machine (Part~{I})},
  journal = {Communications of the ACM},
  year    = 1960,
  volume  = 3,
  number  = 4,
  pages   = {184--195},
  month   = apr
}

@InBook{Papert:1960a,
  author    = {Seymour Papert},
  title     = {Probl\`emes de la construction du nombre},
  chapter   = {Probl\`emes \'epist\'emologiques et g\'en\'etiques
               de la r\'ecurrence},
  publisher = {Presses Universitaires de France},
  year      = 1960,
  pages     = {117--148}
}

@InBook{Papert:1960b,
  author    = {Seymour Papert},
  title     = {Probl\`emes de la construction du nombre, \'Etudes
               d'\'epist\'emologie g\'en\'etique},
  chapter   = {Probl\`emes de la construction du nombre},
  publisher = {Presses Universitaires de France},
  year      = 1960,
  volume    = {XI}
}

@Article{Dijkstra:1960,
  author  = {Edsger Wybe Dijkstra},
  title   = {Recursive Programming},
  journal = {Numerische Mathematik},
  year    = 1960,
  volume  = 2,
  number  = 1,
  pages   = {312--318},
  month   = dec,
  note    = {Springer, {ISSN} 0029-599X}
}

@Article{Buck:1963,
  author  = {Robert Creighton Buck},
  title   = {Mathematical induction and recursive definitions},
  journal = {American Mathematical Monthly},
  year    = 1963,
  volume  = 70,
  number  = 2,
  pages   = {128--135},
  month   = feb
}

@InBook{Matalon:1963,
  author    = {Benjamin Matalon},
  title     = {La formation des raisonnements r\'ecurrentiels,
               \'Etudes d'\'epist\'emologie g\'en\'etique},
  chapter   = {\'Etude du raisonnement par r\'ecurrence sur un
               mod\`ele physique},
  publisher = {Presses Universitaires de France},
  year      = 1963,
  volume    = {XVII},
  pages     = {283--316}
}

@InBook{InhelderPiaget:1963,
  author    = {B\"arbel Inhelder and Jean Piaget},
  title     = {La formation des raisonnements r\'ecurrentiels,
               \'Etudes d'\'epist\'emologie g\'en\'etique},
  chapter   = {De l'it\'eration des actions \`a la r\'ecurrence
               \'el\'ementaire},
  publisher = {Presses Universitaires de France},
  year      = 1963,
  volume    = {XVII},
  pages     = {47--120}
}

@Book{Barron:1968,
  author    = {D. W. Barron},
  title     = {Recursive techniques in programming},
  publisher = {MacDonald/Elsevier},
  year      = 1968,
  series    = {Computer Monographs},
  edition   = {first}
}

@InProceedings{Brown:1972,
  author       = {John Seely Brown},
  title        = {Recursive functional programming as a conceptual
                  tool for social scientists},
  booktitle    = {Proceedings of the ACM Annual Conference},
  pages        = {320--320},
  year         = 1972,
  month        = aug,
  volume       = 1,
  publisher    = {ACM Press},
  address      = {Boston, Massachusetts, USA},
  organization = {ACM SIGCUE},
  summary      = {The purpose of this article is to report on a
                  didactical experience, which is not described in
                  full. The audience is social scientists, which are
                  introduced to recursion through Logo and some 
                  other undefined art language which enables the 
                  display of complex, yet shortly specified, patterns 
                  (like moire). The aim is to familiarise the 
                  students to the expressive power of recursive 
                  thinking, not to teach programming.}
}

@InBook{PiagetStratz:1974,
  author    = {Jean Piaget and C. Stratz},
  title     = {R\'eussir et comprendre},
  chapter   = {La chute r\'ecurrentielle de dominos align\'es},
  publisher = {Presses Universitaires de France},
  year      = 1974,
  pages     = {21--33}
}

@Article{BellGilbert:1974,
  author    = {Stoughton Bell and Edgar J. Gilbert},
  title     = {Learning recursion with syntax diagrams},
  journal   = {The SIGCSE Bulletin},
  year      = 1974,
  volume    = 6,
  number    = 3,
  pages     = {44--45},
  month     = sep,
  note      = {ACM Press, {ISSN} 0097-8418},
  summary   = {The author argues that the first examples of recursion
               given to the students are not as natural as the
               teacher think, e.g., the factorial. Instead, he
               argues that a more convincing support are syntax
               diagrams, proposed by N. Wirth, for expressions in
               some algorithmic language. The author wryly remarks
               that the reader should be ready to answer a student
               asking how can an expression be defined with the
               word "expression".}
}

@Article{Daykin:1974,
  author    = {P. N. Daykin},
  title     = {Teaching recursive programming using {BASIC}},
  journal   = {SIGCUE Outlook},
  year      = 1974,
  volume    = 8,
  number    = 1,
  pages     = {11--13},
  month     = jan,
  note      = {ACM Press, {ISSN} 0163-5735},
  abstract  = {The value of a recursive programming capability in a
               high level programming language is now generally
               recognized. The teaching of recursive programming,
               however, is often postponed to a second-semester
               college course in computing science, as if the topic
               belonged to an advanced level, though it has been
               shown that recursion can be grasped by students of
               mathematics at the secondary school level or
               earlier. One unfortunate result of this
               postponement of recursion in computing science
               teaching is that students who take one semester only
               carry away with them the false notion that computers
               are limited intrinsically to understanding iterative
               processes.},
 summary    = {The teaching of recursion is postponed after after the
               introductory semester to programming. The wide
               availability of BASIC provides with an alternative
               to FORTRAN, where recursion was not permitted at the
               time. In BASIC, subroutines have no parameters but
               may be recursive. The factorial, finding the
               smallest member of a list, Fibonacci numbers,
               binomial coefficients and bubble sort are proposed
               as examples. By contrast, the towers of Hanoi
               presents the particularity that it cannot be easily
               programmed iteratively (an easy way was found in
               1980 by Buneman and Levy,
               though. See~\cite{BunemanLevy:1980}).}
}

@Unpublished{Dijkstra:1974,
  author = {Edsger Wybe Dijkstra},
  title  = {Determinism and recursion versus non-determinism and
            the transitive closure},
  note   = {(Dijkstra archive EWD456)},
  month  = oct,
  year   = 1974
}

@Book{Burge:1975,
  author    = {William H. Burge},
  title     = {Recursive programming techniques},
  publisher = {Addison\hyp{}Wesley},
  year      = 1975,
  series    = {The Systems Programming},
  note      = {{ISBN} 0-201-14450-6}
}

@InProceedings{Dijkstra:1975,
  author    = {Edsger Wybe Dijkstra},
  title     = {Correctness concerns and, among other things, why they 
               are resented},
  booktitle = {Proceedings of the International Conference on
               Reliable Software},
  pages     = {546--550},
  year      = 1975,
  address   = {Los Angeles, California, USA},
  month     = apr,
  note      = {(Dijkstra archive EWD450, dated 22nd
                November 1974)}
}

@InProceedings{Peelle:1976,
  author       = {Howard A. Peelle},
  title        = {Learning mathematics with recursive computer
                  programs},
  booktitle    = {Proceedings of the International Technical Symposium
                  on Computer Science Education},
  pages        = {116--130},
  year         = 1976,
  month        = feb,
  organization = {ACM SIGCSE\hyp{}SIGCUE},
  publisher    = {ACM Press},
  summary      = {Recursion has been used by mathematicians as a
                  foundation for parts of their discipline (Skolem
                  paper on primitive recursion is cited as an
                  example). The paper makes the case for recursion in
                  programming languages by presenting three
                  mathematical problems which can be solved elegantly
                  by recursion in APL (A Programming Language): the
                  sum of the first integers (triangular numbers),
                  Newton's square root approximation and Eratosthenes'
                  prime number sieve. The first problem is not a good
                  idea, as there exists a closed form for the solution
                  and the students may forget it because they find the
                  program easier to remember (same problem with
                  bubblesort). Also, it sets a bad example of
                  non-tail-form recursion because the control context
                  of the recursive call is an arithmetic expression,
                  so a tail recursion with an integer accumulator
                  would be more memory efficient. Moreover, the
                  definition of a recursive function is overly
                  contrived by its expression in APL, so, for
                  instance, three characteristic features of recursion
                  are set forth: the solution to a single, degenerate
                  case, an explicit condition for stopping and an
                  expression referring to the function itself (hence
                  the recursion proper). The two first are
                  conceptually one and the second reveals an
                  operational setting, instead of the more fertile
                  declarative mode of thought.}
}

@InProceedings{Jackson:1976,
  author       = {Glenn A. Jackson},
  title        = {A graphical technique for describing recursion},
  booktitle    = {Proceedings of the Sixth International Technical
                  Symposium on Computer Science Education},
  pages        = {30--32},
  year         = 1976,
  month        = jul,
  organization = {ACM SIGCSE},
  address      = {Williamsburg, Virginia, USA},
  publisher    = {ACM Press},
  abstract     = {One concept in computer science that is very
                  difficult for the beginner to grasp, and equally
                  difficult for the instructor to present in a
                  straightforward understandable manner, is the
                  concept of recursion. Since this is a fundamental
                  concept through which the amount of computer code
                  required for some algorithms can be drastically
                  reduced, an instructor must discuss this area early
                  in a student's career, even though he runs the risk
                  of confusing a few students for a lecture or
                  two. This paper presents a method of describing
                  recursive procedure calls that utilizes a form of
                  self-generating state diagram. This approach enables
                  the student to visually keep track of where program
                  control is located at each moment during 
                  execution.},
  summary      = {In the context of the teaching of ALGOL, a dedicated
                  kind of diagram is used to help the students
                  visualise recursive calls. The example is the
                  inorder traversal of a binary search trees. In the
                  conclusion, the author remarks that such a graphical
                  technique should convince the student that there is
                  only one "version" of the recursive procedure and
                  that a stack of arguments and return addresses
                  (stack frames)  allows us to keep track of 
                  the successive calls. This view is very close to the
                  actual run-time of modern implementations of
                  algorithmic languages. By contrast, recent authors
                  propose that the students be taught a model where
                  there are several instances of the recursive
                  procedure being called and the control stack is
                  implicit.}
}

@InProceedings{AugensteinTenenbaum:1976,
  author       = {Moshe Augenstein and Aaron Tenenbaum},
  title        = {A lesson in recursion and structured programming},
  booktitle    = {Proceedings of the Sixth International Technical
                  Symposium on Computer Science and Education},
  pages        = {17--23},
  year         = 1976,
  address      = {Anaheim, California, USA},
  month        = feb,
  organization = {ACM SIGCSE\hyp{}SIGCUE},
  publisher    = {ACM Press},
  abstract     = {Students in middle level courses in data structures 
                  and programming languages often do not have a full
                  appreciation of recursion. The study of the
                  simulation of recursion can be an excellent tool in
                  improving this situation. It is shown how to
                  construct a nonrecursive routine to solve a problem
                  whose solution is naturally recursive. This
                  nonrecursive routine is then used as a foundation
                  from which one can construct a simpler and better
                  structured program than the original version. The
                  advantages of this activity are also discussed.}
}

@InProceedings{Anonymous:1977,
  author       = {Anonymous},
  title        = {Depth-first digraph algorithms without recursion},
  booktitle    = {Proceedings of the Seventh International Technical
                  Symposium on Computer Science Education},
  pages        = {151--153},
  year         = 1977,
  address      = {Atlanta, Georgia, USA},
  month        = feb,
  organization = {ACM SIGCSE},
  publisher    = {ACM Press}
}

@InProceedings{Kimura:1977,
  author       = {Takayuki Kimura},
  title        = {Recursive programming in {E}nglish for freshmen},
  booktitle    = {Proceedings of the Seventh International Technical
                  Symposium on Computer Science Education},
  pages        = {129--132},
  year         = 1977,
  month        = feb,
  address      = {Atlanta, Georgia, USA},
  organization = {ACM SIGCSE},
  publisher    = {ACM Press},
  abstract     = {The importance of recursive programming in an 
                  introductory computer science course is discussed
                  from the viewpoint that the notions of `process',
                  `program' and `processor' are fundamental in 
                  computer programming. Several examples demonstrate
                  how the concept of recursive programming and proving
                  program correctness can be taught to freshman
                  business majors before they are exposed to any
                  programming language.},
  summary      = {Recursive programs are important for three reasons:
                  (1) they are easier to prove correct than iterative
                  ones because their structure directly supports
                  inductive proofs (loop invariants are harder to come
                  by); (2) their structure fits top-down programming
                  better than iterative programs; (3) they strongly
                  require to be distinguished from the notion of
                  process, i.e., its operational semantics (the author
                  identifies a program to a linguistic entity and the
                  process to a non-liguistic entity), which is
                  most suitable for tackling parallel programming.
                  Besides, the concept of processor closes the
                  triad. Programs, processes and processors are
                  explained by means of a an analogy with a business
                  company: "Programming is equivalent to establishing
                  a business firm." Recursion is interestingly
                  explained as threading or, in terms of the analogy,
                  as giving a copy of the task to an assistant,
                  together with a smaller input. Three recursive
                  programs are presented in this framework: squaring a
                  positive integer (with a correctness proof by
                  induction), computing Fibonacci numbers (using
                  \(F_{n+2} = F_{n+1} + F_{n}\), so parallelism is
                  demonstrated) and bubble sort. This approach is
                  proposed to freshmen of a business college, before
                  they are introduced to ALGOL. The weak aspect of the
                  analogy is the definition of the processor as "the
                  necessary and sufficient resources for creating a
                  process society by a program," because later on it 
                  is assumed that the firm has an infinite amount of
                  resources.}
}

@Article{EliotLovellDaytonMcGrady:1979,
  author  = {John Eliot and Kenneth Lovell and C. Mitchell Dayton and 
             B. F. McGrady},
  title   = {A further investigation of children's understanding of
             recursive thinking},
  journal = {Journal of Experimental Child Psychology},
  volume  = 28,
  number  = 1,
  pages   = {149--157},
  year    = 1979
}


@Article{BunemanLevy:1980,
  author  = {Peter Buneman and Leon Levy},
  title   = {The towers of {H}anoi problem},
  journal = {Information Processing Letters},
  volume  = 10,
  number  = {4-5},
  pages   = {243--244},
  day     = {5},
  month   = jul,
  year    = 1980,
  summary = {A simple iterative solution to the Towers of Hanoi puzzle
             is presented. Totally order the pegs. Move the smallest
             disk to the next peg and then move the other disk
             (there is only one possible move). Repeat.}
}

@Book{Papert:1980,
  author    = {Seymour Papert},
  title     = {Mindstorms: children, computers and powerful ideas},
  publisher = {Basic Books},
  year      = 1980,
  edition   = {first}
}

@InProceedings{KahneyEisenstadt:1982,
  author    = {Hank Kahney and Marc Eisenstadt},
  title     = {Programmers' mental models of their programming
               tasks: the interaction of real world knowledge and
               programming knowledge},
  booktitle = {Proceedings of the Fourth Annual Conference of the
               Cognitive Science Society},
  pages     = {143--145},
  year      = 1982,
  address   = {Ann Arbor, Michigan, USA}
}

@InProceedings{Kruse:1982,
  author       = {Robert L. Kruse},
  title        = {On teaching recursion},
  booktitle    = {Proceedings of the Thirteenth International
                  Technical Symposium on Computer Science Education},
  pages        = {92--96},
  year         = 1982,
  month        = feb,
  address      = {Indianapolis, Indiana, USA},
  organization = {ACM SIGCSE},
  publisher    = {ACM Press},
  note         = {{ISBN} 0-89791-067-2},
  abstract     = {Tree diagrams can be fruitfully employed in
                  elementary courses to illustrate recursion,
                  explain its implementation, and motivate its
                  applications in algorithm design. At the same 
                  time, tree diagrams can lead to guidelines to 
                  help the student decide when recursion is a 
                  good method, and when it should be avoided. 
                  This paper discusses these methods and, as an
                  example, develops an algorithm for generating
                  permutations.}
}

@InProceedings{AnzaiUesato:1982,
  author    = {Yuichiro Anzai and Y. Uesato},
  title     = {Learning recursive procedures by middle\hyp{}school
               children},
  booktitle = {Proceedings of the Annual Conference of the Cognitive
               Science Society},
  pages     = {100--102},
  address   = {Ann Arbor, Michigan, USA},
  month     = aug,
  year      = 1982,
  abstract  = {[They found that previous experience solving iterative 
                mathematical functions facilitated later solving 
                similar recursive ones, but not vice-versa.]}
}

@Article{Ford:1982,
  author    = {Gary Ford},
  title     = {A framework for teaching recursion},
  journal   = {The SIGCSE Bulletin},
  year      = 1982,
  volume    = 14,
  number    = 2,
  pages     = {32--39},
  month     = jun,
  note      = {ACM Press, {ISSN} 0097-8418},
  abstract  = {Recursion is presented as a generalized control
               structure, with iteration being a special case. A
               method is described to determine when to use
               recursion and when to use iteration in designing an
               algorithm to solve a problem.}
}

@InProceedings{Kahney:1983,
  author       = {Hank Kahney},
  title        = {What do novice programmers know about recursion},
  booktitle    = {Proceedings of the Conference on Human Factors in
                  Computing Systems},
  pages        = {235--239},
  year         = 1983,
  month        = dec,
  address      = {Boston, Massachusetts, USA},
  organization = {ACM SIGCHI},
  publisher    = {ACM Press},
  note         = {{ISBN} 0-89791-121-0},
  abstract     = {Recent research into differences between novice and
                  expert computer programmers has provided evidence
                  that experts know more than novices, and what they
                  know is better organized. The conclusion is only as
                  interesting as it is intuitive. This paper reports
                  an experiment which was designed to determine
                  precisely what novice programmers understand about
                  the behaviour of recursive procedures, and exactly
                  how their understanding differs from an expert's
                  understanding of the process. The results show that
                  different novices understand, or misunderstand,
                  different things. Implications of the findings are
                  discussed with respect to other research into novice
                  and expert programming performance.}
}

@Article{Moor:1983,
  author  = {M. Moor},
  title   = {A recursion excursion with a surprising discovery},
  journal = {The Computing Teacher},
  volume  = 11,
  number  = 5,
  pages   = {49--52},
  date    = {1983-12-01/1984-01-31}
}

@Book{Turkle:1984,
  author    = {Sherry Turkle},
  title     = {{The Second Self: Computers and the Human Spirit}},
  publisher = {Simon \& Schuster},
  year      = 1984,
  address   = {New York, USA}
}

@Article{Riordon:1984a,
  author  = {Tim Riordon},
  title   = {Helping students with recursion: teaching strategies
             ({Part~I})},
  journal = {The Computing Teacher},
  volume  = 11,
  number  = 5,
  pages   = {59--64},
  date    = {1983-12-01/1984-01-31}
}

@Article{Riordon:1984b,
  author  = {Tim Riordon},
  title   = {Helping students with recursion: teaching strategies
             ({Part~II})},
  journal = {The Computing Teacher},
  year    = 1984,
  volume  = 11,
  number  = 6,
  pages   = {59--64},
  month   = feb
}

@Article{Riordon:1984c,
  author  = {Tim Riordon},
  title   = {Helping students with recursion: teaching strategies
             ({Part~III}: {T}eaching students about embedded 
             recursion)},
  journal = {The Computing Teacher},
  year    = 1984,
  volume  = 11,
  number  = 7,
  pages   = {64--69},
  month   = mar,
  abstract = {Describes activities designed to teach students about   
              embedded recursion. Topics cover providing intuitions 
              about embedded recursions, predicting embedded 
              recursions, seeing patterns and processes, presenting 
              graphic designs containing embedded copies of 
              themselves, and exploring graphics, numerical, and word 
              examples.}
}

@Book{Rohl:1984,
  author    = {J. S. Rohl},
  title     = {Recursion via Pascal},
  publisher = {Cambridge University Press},
  year      = 1984,
  series    = {Cambridge Computer Science Texts},
  month     = aug,
  note      = {{ISBN} 0521269342}
}

@Article{Er:1984,
  author    = {M. C. Er},
  title     = {On the complexity of recursion in problem\hyp{}solving},
  journal   = {International Journal of Man\hyp{}Machine Studies},
  year      = 1984,
  volume    = 20,
  number    = 6,
  pages     = {537--544},
  month     = jun,
  note      = {Elsevier, {ISSN} 0020-7373},
  abstract  = {The importance of paying attention to the complexity of
               recursion in problem solving is stressed. Many
               ill-founded beliefs and doctrines on constructing
               recursive algorithms are challenged. The Tower of
               Hanoi problem and its variant are used as concrete
               examples for illustrating that many seemingly
               correct recursive algorithms are, indeed, invalid or
               non-optimal. A simple context-free grammar for
               generating strings of balanced parentheses is then
               used to show the difficulty of programming recursive
               algorithms in block-structured languages. Other
               factors contributing to the difficulty in
               understanding recursive algorithms implemented in
               block-structured languages are also identified. It
               is suggested that more research needs to be done to
               foster the science of recursive programming.}
}

@InProceedings{AndersonPirolliFarrell:1984,
  author    = {John R. Anderson and Peter L. Pirolli and Robert
               Farrell},
  title     = {Learning to program recursion},
  booktitle = {Proceedings of the Annual Conference of the Cognitive
               Science Society},
  pages     = {277--280},
  year      = 1984,
  address   = {Boulder, Colorado, USA},
  abstract  = {Learning to program recursive functions in languages
               like LISP is notoriously difficult. Indeed, a 
               primary mark of expertise in such languages is the
               ability to plan and code recursive functions. 
               Recently, we have performed protocol studies of
               students learning to program recursion in LISP and 
               Logo as well as controlled experiments on learning
               recursion in a simple programming language. We have
               used the GRAPES production system model to address
               these results. GRAPES not only models programming
               performance but also learning by doing by the 
               mechanism of knowledge compilation. Knowledge 
               compilation summarizes extensive problem-solving 
               operations into new compact production rules.}
}

@Article{Ford:1984,
  author    = {Gary Ford},
  title     = {An implementation\hyp{}independent approach to teaching
               recursion},
  journal   = {The SIGCSE Bulletin},
  year      = 1984,
  volume    = 16,
  number    = 1,
  pages     = {213--216},
  month     = feb,
  note      = {ACM Press, {ISSN} 0097-8418},
  abstract  = {The principle of abstraction, of separating a concept
               from a particular implementation of that concept, is
               gaining increasingly widespread use in programming
               and problem solving, and in teaching these
               subjects. A method of teaching the abstract concept
               of recursion, independent of its implementation, is
               presented.}
}

@Article{EarlyStanat:1985,
  author  = {Grady G. Early and Donald F. Stanat},
  title   = {{Chinese Rings and Recursion}},
  journal = {The SIGSE Bulletin},
  year    = 1985,
  volume  = 17,
  number  = 4,
  pages   = {69--82},
  month   = dec
}

@InProceedings{Thompson:1985,
  author    = {Patrick W. Thompson},
  title     = {Understanding recursion: process \(\approx\) object},
  booktitle = {Proceedings of the Seventh Annual Meeting of the North
               American Chapter of the International Group for the
               Psychology of Mathematics Education},
  pages     = {357--362},
  year      = 1985,
  editor    = {S. Damarin},
  address   = {Ohio State University, Colombus, Ohio, USA},
  abstract  = {It is hypothesized that to recognize a computation as
               requiring recursion, students must conceptualize a
               reciprocal relationship between processes and their
               resulting objects. An example is given, along with a
               discussion of the role of recursion within a
               mathematics curriculum.}
}

@InProceedings{Tempel:1985,
  author    = {Michael Tempel},
  title     = {What's so hard about recursion?},
  booktitle = {Proceedings of the International Conference on
              {LOGO}},
  year      = 1985,
  address   = {Cambridge, Massachussets, USA}
}

@InProceedings{McDougall:1985,
  author    = {Anne McDougall},
  title     = {Teaching and learning about recursion},
  booktitle = {Proceedings of the International Conference on {LOGO}},
  year      = 1985,
  address   = {Cambridge, Massachussets, USA}
}

@Article{Martin:1985,
  author   = {Max R. Martin},
  title    = {Recursion---{A} powerful but often difficult idea},
  journal  = {Computers in the Schools},
  year     = 1985,
  volume   = 2,
  number   = {2-3},
  pages    = {209--217},
  abstract = {Of the commonly available languages for educational 
              use, only Logo and Pascal have the capability for true 
              recursion. Papert (1980), Abelson (1982a,1982b), Babbie 
              (1984), and others have termed recursion a "powerful 
              idea," one which can be applied in many situations. 
              Simply put, recursion refers to the ability of a Logo 
              or Pascal procedure to call itself, or use itself as a 
              subprocedure. A moment's reflection may serve to 
              convince the reader that recursion is indeed a powerful 
              feature of Logo. Programmers familiar with a structured 
              approach to BASIC know that extensive use of 
              subroutines can add power to their programs. Similarly, 
              Logo programs are often composed of small procedures 
              called from within a superprocedure. The option to 
              allow the superprocedure to call itself as a 
              subprocedure adds significant power to the language, 
              but also makes it difficult to follow the flow of the 
              program. Abelson's MYSTERY program, repeated in the two 
              books on Logo for the Apple II computer is a fine 
              example of how recursion may be difficult to follow, 
              even in a relatively short, simple-appearing program.}
}

@Article{LeeMitchell:1985,
  author  = {Patrick C. Lee and Margaret A. Mitchell},
  title   = {Demystifying {LOGO} recursion: a storage process
             model of embedded recursion},
  journal = {Computers in the Schools},
  year    = 1985,
  volume  = 2,
  number  = 2,
  pages   = {197--208}
}

@Article{BrewerSeagraves:1985,
  author  = {B. C. Bowman and K. Seagraves},
  title   = {Picturing recursion},
  journal = {The Computing Teacher},
  year    = 1985,
  month   = apr,
  volume  = 12,
  number  = 7,
  pages   = {28--32}
}

@Article{PirolliAnderson:1985,
  author    = {Peter L. Pirolli and John R. Anderson},
  title     = {The role of learning from examples in the acquisition 
               of recursive programming skills},
  journal   = {Canadian Journal of Psychology},
  year      = 1985,
  volume    = 39,
  number    = 2,
  pages     = {240--272},
  month     = jun,
  note      = {Canadian Psychological Association, {ISSN} 0008-4255},
  abstract  = {Previous research on programming (e.g. Kahney, 1982;
               Soloway, Bonar & Ehrlich, 1983) has tended to focus
               on characterizing programming behaviour at various
               levels of expertise. These studies provide snapshots
               of the development of programming skills. The
               research reported here attempts to get a detailed
               trace of the early transitions in problem-solving by
               studying the verbal protocols of subjects solving
               sequences of programming problems involving
               recursion. We have developed a theory of the
               problem-solving behaviour and learning evident in
               these protocols and will report simulations based on
               that theory. In the next section we provide a brief
               introduction to recursive functions. We then present
               an overview of the GRAPES production system which we
               have used to midel the problem-solving behaviour and
               learning observed in individual subjects (see also
               Anderson, Farrell and Sauers, 1984). In subsequent
               sections, we first present a model of expert
               performance in programming recursive functions and
               then the simulations and protocols of three students
               learning to program recursive functions.}
}

@Article{KurlandPea:1985,
  author    = {D. Midian Kurland and Roy D. Pea},
  title     = {Children's mental models of recursive {LOGO} programs},
  journal   = {Journal of Educational Computing Research},
  year      = 1985,
  volume    = 1,
  number    = 2,
  pages     = {235--243},
  note      = {Baywood},
  abstract  = {Children who had a year of {LOGO} programming 
               experience were asked to think aloud about what brief 
               {LOGO} recursive programs will do, and then to predict 
               with a hand-simulation of the programs what the {LOGO}
               graphics turtle will draw when the program is
               executed. If discrepancies arose in this last phase,
               children were asked to explain them. A prevalent but
               misguided "looping" interpretation of {LOGO} recursion
               was identified, and this robust mental model
               persisted even in the face of contradiction between
               what the program did when executed and the child's
               predictions for what it would do.}
}

@InProceedings{KurtzJohnson:1985,
  author       = {Barry L. Kurtz and Dennis Johnson},
  title        = {Using simulation to teach recursion and binary tree
                  traversals},
  booktitle    = {Proceedings of the Sixteenth International Technical
                  Symposium on Computer Science Education},
  pages        = {49--54},
  year         = 1985,
  month        = mar,
  address      = {New Orleans, Louisiana, USA},
  organization = {ACM SIGCSE},
  publisher    = {ACM Press},
  note         = {{ISBN} 0-89791-152-0},
  abstract     = {Computer science students must often be able to
                  mentally execute "static" source code to envision
                  "dynamic" changes in data structures. This is a
                  difficult skill to acquire, however, the computer
                  itself can help students develop such talents
                  through well designed simulations. This paper
                  reports on one such simulation, recursive traversals
                  of binary trees, developed as part of an NSF grant. 
                  The processes of pedagogical design, screen design,
                  top down program coding, and field testing are
                  described in detail. Based on these field tests, it
                  is clear that simulations help students understand
                  difficult concepts, such as recursion and tree
                  traversals.}
}

@Article{Kilpatrick:1985,
  author  = {Jeremy Kilpatrick},
  title   = {Reflection and recursion},
  journal = {Educational Studies in Mathematics},
  year    = 1985,
  volume  = 16,
  number  = 1,
  pages   = {1--26},
  month   = feb,
  note    = {Springer}
}

@InProceedings{Lavallade:1985,
  author       = {D. Lavallade},
  title        = {In search of recursion},
  booktitle    = {Proceedings of the Conference "Logo and 
                  Mathematics Education"},
  year         = 1985,
  editor       = {C. Hoyles and R. Noss},
  address      = {London, United Kingdom},
  organization = {University of London, Institute of Education}
}

@InProceedings{Hausmann:1985,
  author    = {Kristina Hausmann},
  title     = {Iterative and recursive modes of thinking in
               mathematical problem solving processes},
  booktitle = {Proceedings of the Ninth Conference "Psychology of
               Mathematics Education"},
  pages     = {18--23},
  year      = 1985,
  volume    = 1,
  address   = {Noordwijkerhout, The Netherlands},
  month     = jul,
  abstract =  {Iterative and recursive methods of problem solving are
               important in mathematics and computer sciences as
               well. It is not easy for students to acquire these
               concepts in mathematics instruction. The use of the
               micro-computer in the class-room might give
               additional practice with the iterative and recursive
               structures. In a suitable programming environment,
               students can generate their own procedures which may
               reinforce understanding.}
}

@InProceedings{Mendelsohn:1985,
  author       = {P. Mendelsohn},
  title        = {Learning recursive procedures through {L}ogo},
  booktitle    = {Proceedings of the First conference "Logo and 
                  Mathematics Education"},
  year         = 1985,
  organization = {Institute of Education, University of London,
                  London, United Kingdom}
}

@Unpublished{Greer:1986,
  author = {Jim E. Greer},
  title  = {Techniques for teaching recursion},
  note   = {Research Seminar presented to the Department of Computer
            Sciences, University of Texas at Austin, USA},
  month  = dec,
  year   = 1986
}

@Book{Roberts:1986,
  author    = {Eric S. Roberts},
  title     = {Thinking recursively},
  publisher = {John Wiley \& Sons},
  year      = 1986,
  note      = {{ISSN} 0-471-81652-3}
}

@Article{Pirolli:1986,
  author    = {Peter L. Pirolli},
  title     = {A cognitive model and computer tutor for programming
               recursion},
  journal   = {Human\hyp{}Computer Interaction},
  year      = 1986,
  volume    = 2,
  number    = 4,
  pages     = {319--355},
  month     = dec,
  note      = {Taylor \& Francis, {ISSN} 0737-0024},
  abstract  = {This article discusses cognitive models of learning to
               program recursion and their relation to lessons on
               recursion in an intelligent computer tutor for LISP
               programming (the LISP Tutor). The cognitive models
               are implemented as production systems in which
               programming skill is characterized as the
               decomposition of programming goals into subgoals and
               elementary actions via the application of
               programming plans. Two sets of learning mechanisms
               are used in the cognitive models. Analogical
               problem-solving mechanisms use declarative knowledge
               of example program solutions to overcome
               problem-solving impasses. Knowledge compilation
               mechanisms summarize problem solutions into
               efficient problem-solving skill. Analyses and
               simulations of novice and expert programming were
               used to develop ideal models of the programming
               knowledge to confer upon students and bugs that
               characterize common misconceptions. The LISP Tutor
               uses the ideal models and bugs to guide its
               interactions with students. Experimental evaluations
               of the LISP Tutor indicate that it is more efficient
               and effective than classroom instruction.}
}

@Article{LeronZazkis:1986,
  author  = {Uri Leron and Rina Zazkis},
  title   = {Computational recursion and mathematical induction}, 
  journal = {For the Learning of Mathematics},
  year    = 1986,
  volume  = 6,
  number  = 2,
  pages   = {25--28},
  month   = jun,
  note    = {FLM Publishing Association}
}

@Article{KesslerAnderson:1986,
  author    = {Claudius M. Kessler and John R. Anderson},
  title     = {Learning flow of control: recursive and iterative
               procedures},
  journal   = {Human\hyp{}Computer Interaction},
  year      = 1986,
  month     = jun,
  volume    = 2,
  number    = 2,
  pages     = {135--166},
  note      = {Taylor \& Francis, {ISSN} 0737-0024},
  abstract  = {Two experiments were performed to study students'
               ability to write recursive and iterative programs
               and transfer between these two skills. Subjects
               wrote functions to accumulate instances into a
               list. Problems varied in terms of whether they were
               recursive or iterative, whether they operated on
               lists or numbers, whether they accumulated results
               in forward or backward manner, whether they
               accumulated on success or failure, and whether they
               simply skipped or ejected on failure to
               accumulate. Subjects had real difficulty only with
               the dimensions concerned with flow of control,
               namely, recursive versus iterative, and skip versus
               eject. We found positive transfer from writing
               iterative functions to writing recursive functions,
               but not vice versa. A subsequent protocol study
               revealed subjects had such a poor mental model of
               recursion that they developed poor learning
               strategies which hindered their understanding of
               iteration. It is argued that having an adequate
               model of the functionality of programming is
               prerequisite to learning to program, and that it is
               sensible pedagogical practice to base understanding
               of recursive flow of control on understanding
               iterative flow of control.}
}

@InProceedings{Rouchier:1986a,
  author    = {Andr\'e Rouchier},
  title     = {Learning recursive calls in building up {LOGO}
               procedures},
  booktitle = {Proceedings of the Tenth Conference "Psychology 
               of Mathematics Education"},
  year      = 1986,
  volume    = 10,
  address   = {London, United Kingdom},
  month     = jul,
  publisher = {University of London, Institute of Education}
}

@InProceedings{Samurcay:1986,
  author    = {Renan Samur\c{c}ay},
  title     = {Initial representations of students in using
               recursive {L}ogo procedures},
  booktitle = {Proceedings of the Tenth Conference 
               "Psychology of Mathematics Education"},
  year      = 1986,
  volume    = 10,
  address   = {London, United Kingdom},
  month     = jul,
  publisher = {University of London, Institute of Education}
}

@InProceedings{Rouchier:1986b,
  author    = {Andr\'e Rouchier},
  title     = {Central recursive calls and nesting in learning {L}ogo
               programming},
  booktitle = {Proceedings of the Second Conference "Logo and 
               Mathematical Education"},
  year      = 1986,
  month     = jul,
  volume    = 2,
  address   = {London, United Kingdom}
}

@Article{Retschitzki:1986,
  author  = {Jean Retschitzki},
  title   = {{La r\'ecursivit\'e comme m\'ethode g\'en\'erale de
              r\'esolution de probl\`emes}},
  journal = {Bulletin du Cours des Animateurs en Informatique},
  year    = 1986,
  volume  = 15,
  pages   = {4--9}
}

@InProceedings{Olson:1987,
  author       = {A. T. Olson},
  title        = {The curricular implications of recursion},
  booktitle    = {Proceedings of the Third International Conference
                  for {LOGO} and Mathematics Education},
  year         = 1987,
  address      = {Montr\'eal, Canada},
  organization = {Concordia University}
}

@Unpublished{Marti:1987,
  author = {E. Marti},
  title  = {Diff\'erentes approches (th\'eoriques et
            exp\'erimentales) de la r\'ecursivit\'e},
  note   = {Memorandum no.32, Institut de Psychologie,
            Universit\'e de Fribourg, Fribourg, Switzerland},
  year   = 1987
}

@Article{Rouchier:1987,
  author  = {Andr\'e Rouchier},
  title   = {The writing and interpretation of recursive
             procedures in {LOGO}},
  journal = {Psychologie Fran{\c{c}}aise},
  year    = 1987,
  volume  = 32,
  number  = 4,
  pages   = {281--285},
  month   = dec,
  note    = {Elsevier, {ISSN} 0033-2984}
}

@InProceedings{ChuJohnsonbaugh:1987,
  author       = {I-Ping Chu and Richard Johnsonbaugh},
  title        = {Tiling and recursion},
  booktitle    = {Proceedings of the Eighteenth International
                  Technical Symposium on Computer Science Education},
  pages        = {261--263},
  year         = 1987,
  month        = feb,
  address      = {St. Louis, Missouri, USA},
  organization = {ACM SIGCSE},
  publisher    = {ACM Press},
  note         = {{ISBN} 0-89791-217-9},
  abstract     = {A tiling problem is presented that demonstrates the
                  power of recursion in the design of algorithms. When
                  implemented as a program, the solution can be shown
                  using a computer graphics display}
}

@Unpublished{Barfurth:1987,
  author = {Marion Barfurth},
  title  = {Recursion: what is it?},
  note   = {Memorandum no.31, Institut de Psychologie,
            Universit\'e de Fribourg, Fribourg, Switzerland},
  year   = 1987
}

@InProceedings{BarfurthRetschitzki:1987,
  author    = {Marion Barfurth and Jean Retschitzki},
  title     = {The pedagogical relevance of children working with
               recursion},
  booktitle = {Proceedings of the Third Conference "Logo and
               Mathematical Education"},
  year      = 1987,
  month     = jul,
  volume    = 3,
  pages     = {164--172},
  address   = {Montr\'eal, Canada}
}

@PhdThesis{Greer:1987,
  author   = {James Eugene Greer},
  title    = {An empirical comparison of techniques for teaching
              recursion in introductory computer sciences},
  school   = {University of Texas at Austin, USA},
  year     = 1987,
  address  = {Department of Mathematics and Computer Science
              Education},
  abstract = {This research is about the problem solving activities 
              of novice programmers as they learn to create recursive 
              LISP programs. Their problem solving not only includes 
              the issue of mental models, but also how to use these 
              mental models in conjunction with other problem solving 
              techniques. In fact, at various stages of their 
              learning, learners seem to use different packages of 
              problem solving methods. Each of these packages we call 
              a mental method. In this paper, we discuss the PETAL 
              learning environment which assists learners in the use 
              of three of these mental methods: the syntactic method, 
              the analytic method and the analysis/synthesis method. 
              PETAL externalizes each mental method through its own 
              customized interface, called a programming environment 
              tool (PET). Such externalization helps learners 
              internalize concepts, and organize relevant
              knowledge and generally leads to improved learning. The 
              PETAL System itself is presented.}
}

@PhdThesis{McDougall:1988,
  author  = {Anne McDougall},
  title   = {Children, {R}ecursion and {L}ogo {P}rogramming},
  school  = {Monash University},
  year    = 1988,
  address = {Melbourne, Australia}
}

@Article{Knight:1988,
  author   = {D. G. Knight},
  title    = {Determinants and recursion},
  journal  = {International Journal of Mathematical Education in
              Science and Technology},
  year     = 1988,
  volume   = 19,
  number   = 1,
  pages    = {67--71},
  month    = jan,
  note     = {Taylor \& Francis, {ISSN} 0020-739X},
  abstract = {As educationalists turn to Pascal as the main
              introductory programming language in place of BASIC
              or FORTRAN, problems which naturally involve
              recursion are now easily programmable. We illustrate
              with a discussion of the recursive evaluation of
              determinants of any order.}
}

@InProceedings{Wiedenbeck:1988,
  author       = {Susan Wiedenbeck},
  title        = {Learning recursion as a concept and as a programming
                  technique},
  booktitle    = {Proceedings of the Nineteenth International
                  Technical Symposium on Computer Science Education},
  pages        = {275--278},
  year         = 1988,
  month        = feb,
  address      = {Atlanta, Georgia, USA},
  organization = {ACM SIGCSE},
  publisher    = {ACM Press},
  note         = {{ISBN} 0-89791-256-X},
  abstract     = {Two experiments on learning recursion and iteration
                  were carried out. The first studied learning of the
                  mathematical concept of recursion by having subjects
                  compute mathematical functions by analogy to worked
                  out examples. The results suggest that subjects are
                  quite able to induce a computational procedure for
                  both iterative and recursive functions from
                  examples. Furthermore, prior practice with iterative
                  examples does not seem to facilitate subsequent
                  performance on similar recursive problems, nor does
                  prior practice with recursive examples facilitate
                  performance on iterative problems. The second
                  experiment studied novice subjects' comprehension of
                  iterative and recursive Pascal programs. 
                  Comprehension of the iterative program was not 
                  improved by prior exposure to the recursive version 
                  of the program. Comprehension of the recursive 
                  version was improved moderately by prior work with 
                  the iterative version.}
}

@InProceedings{ElenbogenOKennon:1988,
  author       = {Bruce S. Elenbogen and Martha R. O'Kennon},
  title        = {Teaching recursion using fractals in {P}rolog},
  booktitle    = {Proceedings of the Nineteenth International
                  Technical Symposium on Computer Science Education},
  pages        = {263--266},
  year         = 1988,
  month        = feb,
  address      = {Atlanta, Georgia, USA},
  organization = {ACM SIGCSE},
  publisher    = {ACM Press},
  note         = {{ISBN} 0-89791-256-X},
  abstract     = {Recursion has traditionally been a difficult concept
                  for students to understand, both as a control
                  structure and as an analytical tool. This paper
                  explores recursion using Prolog (whose predominate
                  control structure is recursion) and through fractals
                  which possess a visually recursive form. We discuss
                  several simple Turbo Prolog programs which
                  demonstrate recursion graphically and whose
                  resultant figures are fractals whose recursive
                  nature is particularly easy to analyze in the Turbo
                  Prolog environment.}
}

@InBook{Glaser:1988,
  author    = {John R. Anderson and Peter L. Pirolli and Robert
               Farrell},
  title     = {The nature of expertise},
  chapter   = {Learning to program recursive functions},
  publisher = {Lawrence Erlbaum},
  year      = 1988,
  address   = {Hillsdale, New Jersey, USA},
  pages     = {153--183}
}

@Article{LissMcMillan:1988,
  author   = {Ivan B. Liss and Thomas C. McMillan},
  title    = {An amazing exercise in recursion for {CS1} and {CS2}},
  journal  = {The SIGCSE Bulletin},
  year     = 1988,
  volume   = 20,
  number   = 1,
  pages    = {270--274},
  month    = feb,
  note     = {ACM Press, {ISSN} 0097-8418},
  abstract = {This paper describes an exercise which has been used in
              both CS1 and CS2 courses for the purpose of introducing
              the concepts of recursion and stacks, and for
              illustrating the benefits of procedural abstraction. The
              problem is to write a program which finds a path through
              a rectangular maze. The exercise is used in CS1 as part
              of an introduction to recursion. In CS2, it is used to
              illustrate and employ the abstract data type "stack". In
              both exercises, the ideas are presented so as to
              reinforce the concepts of top-down design, and
              procedural and data abstraction.}
}

@InProceedings{Leron:1988,
  author    = {Uri Leron},
  title     = {What makes recursion hard?},
  booktitle = {Proceedings of the Sixth International Congress on
               Mathematics Education},
  address   = {Budapest, Hungary},
  month     = jul,
  year      = 1988
}

@InProceedings{Dupuis:1989,
  author    = {C. Dupuis and D. Guin},
  title     = {Repr\'esentations du fonctionnement 
               d'une proc\'edure r\'ecursive en {L}ogo},
  booktitle = {Proceedings of the 13th Conference "Psychology 
               of Mathematics Education"},
  pages     = {220--227},
  year      = 1989,
  address   = {Paris, France}
}

@Article{Greer:1989,
  author   = {Jim E. Greer},
  title    = {A comparison of instructional treatments for
              introducing recursion},
  journal  = {Computer Science Education},
  year     = 1989,
  volume   = 1,
  number   = 2,
  pages    = {111--128},
  abstract = {This study examined the effects of three approaches to
              teaching recursion on students' subsequent
              achievement in recursion. Eighty-four students who
              were registered in CS315 at the University of Texas
              at Austin during the fall semester of 1986 were
              randomly assigned to three instructional treatment
              groups and were taught the concept of recursion
              according to three different curricula. Video-taped
              lectures developed for each of the three
              instructional treatments were presented to the three
              groups. Students' achievement in recursion was
              measured with a post-test immediately following the
              instructional treatment and with two follow-up
              retention tests. No significant difference in
              achievement in recursion was detected among the
              three groups. Students identified as having higher
              general computer science ability did demonstrate
              higher achievement in recursion, regardless of
              instructional treatment.}
}

@Article{Vitale:1989,
  author   = {Bruno Vitale},
  title    = {Elusive recursion: a trip in recursive land},
  journal  = {New Ideas in Psychology},
  year     = 1989,
  volume   = 7,
  number   = 3,
  pages    = {253--276},
  note     = {Elsevier, {ISSN} 0732-118X},
  abstract = {The term recursion is explored in different contexts, to
              arrive at a restricted definition the cognitive
              components and computational relevance of which are
              then analyzed in detail. The need for new specific
              and integrated experimental paradigms for the study
              of this restricted concept (in particular, in the
              teaching of programming) is emphasized. The
              suggestion is made that the notion of "recursion"
              belongs to the realm of fully formalized thought, so
              that its precursors in cognitive development should
              be looked for only with respect to its several
              components (iteration, induction, transitivity,
              generalization, embedding, structural and functional
              dependence, etc.).}
}

@Article{Trautteur:1989,
  author  = {Guiseppe Trautteur},
  title   = {Remarks on recursion: a response to {V}itale},
  journal = {New Ideas in Psychology},
  year    = 1989,
  volume  = 7,
  number  = 3,
  pages   = {376--378},
  note    = {Elsevier, {ISSN} 0732-118X}
}

@Article{Kieren:1989,
  author  = {Thomas E. Kieren},
  title   = {Observation and recursion in {LOGO} mathematics: a
             response to {V}itale},
  journal = {New Ideas in Psychology},
  year    = 1989,
  volume  = 7,
  number  = 3,
  pages   = {277--281},
  note    = {Elsevier, {ISSN} 0732-118X}
}

@InProceedings{BhuiyanGreerGordon:1989,
  author    = {Shawkat Bhuiyan and Jim E. Greer
               and Gordon I. McCalla},
  title     = {Mental models of recursion and their use in the
               {SCENT} programming advisor},
  booktitle = {Proceedings of the International Conference on
               Knowledge\hyp{}based Computer Systems},
  pages     = {135--144},
  year      = 1989,
  month     = dec,
  address   = {Bombay, India},
  volume    = 444,
  series    = {LNCS},
  publisher = {Springer\hyp{}Verlag},
  note      = {{ISBN} 3-540-52850-4}
}

@InProceedings{HendersonRomero:1989,
  author       = {Peter B. Henderson and Francisco J. Romero},
  title        = {Teaching recursion as a problem\hyp{}solving tool
                  using {S}tandard {ML}},
  booktitle    = {Proceedings of the Twentieth International Technical
                  Symposium on Computer Science Education},
  pages        = {27--31},
  year         = 1989,
  month        = feb,
  address      = {Louisville, Kentucky, USA},
  organization = {ACM SIGCSE/IEEE-CS},
  publisher    = {ACM Press},
  note         = {{ISBN} 0-89791-289-5},
  abstract     = {Standard ML is a state of the art functional
                  programming language, with features that make it
                  excellent for teaching recursion and problem solving
                  at the introductory level. Among the many
                  pedagogically interesting characteristics of ML are
                  its simple and uniform syntax, its type polymorphism
                  and type inferencing system, and datatype
                  declaration facilities. With little formal ML
                  instruction, after several weeks first year students
                  were able to use recursively defined data structures
                  and to define fairly powerful recursive functions in
                  ML. Standard ML is highly recommended as a tool for
                  teaching recursive problem solving in the context of
                  a course on the foundations of computer science.}
}

@Article{Wakin:1989,
  author  = {Shirley Wakin},
  title   = {Proof without words: recursion},
  journal = {Mathematics Magazine},
  year    = 1989,
  volume  = 62,
  number  = 3,
  pages   = {172},
  month   = jun
}

@Article{Wiedenbeck:1989,
  author   = {Susan Wiedenbeck},
  title    = {Learning iteration and recursion from examples},
  journal  = {International Journal of Man\hyp{}Machine Studies}, 
  year     = 1989,
  volume   = 30,
  number   = 1,
  pages    = {1--22},
  month    = jan,
  note     = {Elsevier, {ISSN} 0020-7373},
  abstract = {Description de trois expériences d'apprentissage des
              notions d'itération et de récursivité. Dans la
              première, il est étudié comment les sujets
              apprennent à programmer des fonctions mathématiques,
              telle la factorielle, à partir d'exemples. Dans la
              deuxième, est analysée l'utilisation des
              connaissances acquises à partir d'exemples
              récursifs dans la programmation d'une fonction
              mathématique récursive similaire, présentée d'une
              forme abstraite. La troisième expérience aborde la
              compréhension de programmes itératifs et récursifs
              écrits en Pascal}
}

@InProceedings{GobetNunezRetschitzki:1989,
  author    = {Fernand Gobet and Rafael N{\'u}{\~n}ez and Jean
               Retschitzki},
  title     = {Learning recursion with {LOGO}: adolescents'
               difficulties},
  booktitle = {Proceedings of the Second European {LOGO} Conference},
  pages     = {398--409},
  year      = 1989,
  address   = {Gent, Belgique},
  annote    = {Version originale: \emph{{A}pprentissage de la 
               r\'ecursivit\'e avec {LOGO}: {D}ifficult\'es 
               d'adolescents}}
}

@TechReport{RetschitzkiGobetNunez:1989,
  author      = {Jean Retschitzki and Fernand Gobet and Rafael
                 N{\'u}{\~n}ez},
  title       = {Apprentissage de la r\'ecursivit\'e en {LOGO}},
  institution = {D\'epartement de Psychologie, Universit\'e de
                  Fribourg, Fribourg, Switzerland}, 
  year        = 1989,
  number      = 75
}

@Article{Giveon:1989,
  author   = {Yehoshafat Shafee Give'on},
  title    = {Teaching recursive program composition in procedural
              environments},
  journal  = {Machine\hyp{}Mediated Learning},
  year     = 1989,
  volume   = 3,
  pages    = {125--145},
  abstract = {A general heuristic scheme is presented in this paper
              for the introduction of recursive programming in
              procedural environments (i.e., those in which
              programs are written as sequences of instructions
              and commands). In particular, the scheme focuses on
              recursive programming in turtle graphics
              environments. This scheme maintains that recursive
              program composition should be based on descriptive
              programming. That is, the style of programming
              needed for recursive programming is based on
              descriptions of the desired products rather than on
              specifications of the processes that produce
              them. The scheme itself is presented here with an
              analysis of the specific skills found necessary for
              the development of elementary competence in
              recursive programming in such environments.}
}

@InProceedings{McDougall:1989,
  author       = {Anne McDougall},
  title        = {Teaching about recursion in {L}ogo: {A} {R}eview},
  booktitle    = {Proceedings of the Australian Conference Computers 
                  in Education Conference},
  year         = 1989,
  editor       = {T. Dupe},
  address      = {Canberra, Australia},
  organization = {Computer Education Group of the A.C.T.}
}

@InProceedings{McDougall:1990a,
  author    = {Anne McDougall},
  title     = {Children, recursion and {L}ogo programming: an 
               investigation of {P}apert's conjecture about the 
               variability of {P}iagetian stages in 
               computer\hyp{}rich culture},
  booktitle = {Proceedings of the IFIP TC~3 Fifth World Conference 
               on Computers in Education (WCCE)},
  pages     = {415--418},
  year      = 1990,
  editor    = {Anne McDougall and C. Dowling},
  address   = {Sydney, Australia},
  month     = jul,
  abstract  = {This paper describes a study which investigated 
               Papert's conjecture that children in a computer rich 
               learning environment using Logo might be able to 
               engage in activities involving abstract or formal 
               thinking at ages considerably younger than would be 
               expected from Piagetian theory. It reports the 
               development of understanding and use of recursion, a 
               topic usually difficult for undergraduate computer 
               science students, in children of primary school age.}
}

@InProceedings{McDougall:1990b,
  author       = {Anne McDougall},
  title        = {Student difficulties in programming with recursive 
                 {L}ogo},
  booktitle    = {Back to the {F}uture, {F}orward to the {P}ast},
  pages        = {108--115},
  year         = 1990,
  editor       = {Anne McDougall},
  address      = {Melbourne, Australia},
  organization = {Computer Education Group of Victoria}
}

@Article{Costello:1990,
  author   = {Patrick Costello},
  title    = {Analysis of a recursive algorithm for computing
              binomial coefficients},
  journal  = {Computer Science Education},
  year     = 1990,
  volume   = 1,
  number   = 4,
  pages    = {317--329},
  abstract = {While recursion is a useful programming technique, there
              are times when it can be very expensive in terms of
              execution. This idea was demonstrated in a classroom
              exercise involving an analysis of a particular
              recursive algorithm for computing binomial
              coefficients.}
}

@Article{GurtnerGexGobetNunez:1990,
  author   = {Jean-Luc Gurtner and Catherine Gex and Fernand Gobet and
              Rafael N{\'u}{\~n}ez and Jean Retschitzki},
  title    = {La r\'ecursivit\'e rend-elle l'intelligence
              artificielle?},
  journal  = {Revue Suisse de Psychologie},
  year     = 1990,
  volume   = 49,
  number   = 1,
  pages    = {17--26},
  note     = {Verlag Hans Huber, {ISSN} 1421-0185},
  abstract = {This paper deals with the cognitive aspects of the
              difficulties in understanding recursion. Such
              difficulties represent a real obstacle for the
              teaching of higher-level programming
              languages. Unfortunately, no real help can be
              expected from studies in other cognitive fields
              since they usually employ weaker definitions of this
              concept. A detailed analysis of the work done by
              eight high-schoolers (14--15 years old) during an
              advanced {LOGO} course allows genuine observations on
              the nature and origin of the difficulties in
              understanding recursion and inspires reflexions on
              its teaching. Students' work showed that
              difficulties may stem from the interpretation of the
              function of a recursive call, from the understanding
              of programm controlled modification of values of
              variables and from the real signification of a stop
              rule in a recursion process. Does teaching of {LOGO}
              need to include recursivity? If so, differences
              between recursion and iteration should be clearly
              stated from the beginning in order to avoid
              hard-to-overcome misinterpretations. Contrasting
              with a commonly held impression, turtle geometry
              does not seem to provide an easier context for the
              understanding of recursion than the word and list
              microworld.}
}

@Article{Giveon:1990,
  author  = {Yehoshafat Shafee Give'on},
  title   = {Is recursion well defined??},
  journal = {Computers \& Education},
  year    = 1990,
  volume  = 14,
  number  = 1,
  pages   = {35--41},
  note    = {Elsevier Science, {ISSN} 0360-1315}
}

@InProceedings{McDougall:1991,
  author    = {Anne McDougall},
  title     = {Structure and {P}rocess {M}icroviews: {P}artial 
               {U}nderstandings of {R}ecursion in {L}ogo 
               {P}rogramming},
  booktitle = {Proceedings of the Fifth Logo and Mathematics 
               Education Conference (LME)},
  year      = 1991,
  address   = {Lake Tinaroo, Queensland, Australia},
  month     = apr,
  abstract  = {This paper reports part of a case study of development 
               of understanding of recursion. It presents evidence 
               that, part way through the study, the subject had two 
               apparently separate views of recursion. It interprets 
               one of these as being related to recursion in 
               structure and the other as describing a recursive 
               process. A timeline of the subject's experiences 
               related to recursion was used to investigate the 
               generation of these two views and the later 
               development of a working relationship between them. 
               Some implications for teaching are noted.}
}

@InProceedings{BhuiyanGreerMcCalla:1991,
  author    = {Shawkat Bhuiyan and Jim E. Greer
               and Gordon I. McCalla},
  title     = {Characterizing, rationalizing, and reifying Mental
               models of recursion},
  booktitle = {Proceedings of the Thirteenth Annual Meeting of the
               Cognitive Science Society},
  pages     = {120--125},
  year      = 1991,
  address   = {Hillsdale, New Jersey, USA},
  month     = aug,
  publisher = {Psychology Press}
}

@InBook{RetschitzkiGexGobetGurtnerNunez:1991,
  author    = {Jean Retschitzki and Catherine Gex and Fernand Gobet
               and Jean\hyp{}Luc Gurtner and Rafael N{\'u}{\~n}ez},
  title     = {{LOGO} et apprentissages},
  chapter   = {Pens\'ee r\'ecursive et enseignement},
  pages     = {229--240},
  publisher = {Delachaux et Niestl{\'e}},
  year      = 1991,
  address   = {Neuchatel, Switzerland}
}

@Article{Pirolli:1991,
  author   = {Peter L. Pirolli},
  title    = {Effects of examples and their explanations in a lesson
              on recursion: a production system analysis},
  journal  = {Cognition and Instruction},
  year     = 1991,
  volume   = 8,
  number   = 3,
  pages    = {207--259},
  note     = {Routledge, {ISSN} 0737-0008},
  abstract = {Two studies examined how examples and their explanations
              affect learning to program recursive functions. The
              results are analyzed in the context of a production
              system model of analogical problem solving,
              cognitive skill acquisition, and practice. In
              Experiment I, subjects received an example of a
              recursive function, were trained to criterion on one
              set of recursive functions, and were tested on
              transfer to a larger set of recursive functions. The
              structure of the example solution (how it was
              written) was explained to one group of subjects,
              whereas the process generated by the example (how it
              worked) was explained to another group. The
              explanation of structure was found to reduce
              training time when compared with the explanation of
              process. In Experiment 2, subjects were presented
              with examples that shared many parts of their
              solutions with training problems (high similarity
              examples) or shared few parts with training problems
              (low similarity examples). Examples reduced errors
              on the first opportunity for acquiring a skill but
              did not affect subsequent rates of
              improvement. Increases in overall similarity between
              example and target solutions (a) reduced learning
              errors on parts of target solution not analogous to
              the example, (b) did not reduce errors on parts of
              the target solution analogous to the example, and
              (c) did not increase rates of erroneous intrusions
              from the example. Examples appear to facilitate the
              initial acquisition of cognitive skills, have no
              interaction with the strengthening of skills, and
              facilitate weak method problem solving that does not
              involve direct analogies from the examples.}
}

@Article{Leonard:1991,
  author  = {M. Leonard},
  title   = {Learning the structure of recursive programs in {B}oxer},
  journal = {Journal of Mathematical Behavior},
  year    = 1991,
  volume  = 10,
  number  = 1,
  pages   = {17--53},
  month   = apr,
  note    = {Elsevier, {ISSN} 0732-3123}
}

@Article{Apostel:1991,
  author  = {Leo Apostel},
  title   = {Elusive recursiveness---{T}he necessity of a dynamic and
             pragmatic approach: a response to {V}itale}, 
  journal = {New Ideas in Psychology},
  year    = 1991,
  volume  = 9,
  number  = 3,
  pages   = {367--373},
  note    = {Elsevier, {ISSN} 0732-118X}
}

@Article{Murnane:1991,
  author   = {John Murnane},
  title    = {Models of recursion},
  journal  = {Computers \& Education},
  year     = 1991,
  volume   = 16,
  number   = 2,
  pages    = {197--201},
  note     = {Elsevier Science, {ISSN} 0360-1315},
  abstract = {Teachers using {LOGO} need a set of models through which
              the concepts of recursion can be introduced. This
              paper gives a list of attributes a good recursive
              model should possess, together with examples of good
              and bad models.}
}

@Article{Giveon:1991,
  author   = {Yehoshafat Shafee Give'on},
  title    = {Teaching recursive programming using parallel
              multi\hyp{}turtle graphics},
  journal  = {Computers \& Education},
  year     = 1991,
  volume   = 16,
  number   = 3,
  pages    = {267--280},
  month    = mar,
  note     = {Elsevier Science, {ISSN} 0360-1315},
  abstract = {A general heuristic scheme for the programming of
              recursive patterns in multi-turtle environments is
              presented in this paper. It is offered here for its
              own sake as well as a tool for teaching recursion to
              high school students of Computer Science (or
              Informatics) and to teacher training students of
              Computer Science Teaching. This scheme is relatively
              simple, when compared in terms of requirements and
              results with recursive programming of the same
              patterns in single-turtle environments. Furthermore,
              when applied to all recursive graphic patterns used
              in teaching recursive programming, this scheme
              yields simple recursive programs. Recursion in
              multi-turtle environments, when limited to those
              recursive graphic patterns, leads naturally to
              iterative programs. There results have some
              theoretical and education implications that are
              further discussed in the paper.}
}

@Article{BundyGrosseBrna:1991,
  author   = {Alan Bundy and Gerd Grosse and Paul Brna},
  title    = {A recursive techniques editor for {P}rolog},
  journal  = {Instructional Science},
  year     = 1991,
  volume   = 20,
  number   = {2-3},
  pages    = {135--172},
  month    = mar,
  note     = {Springer, {ISSN} 0020-4277},
  abstract = {We describe an editor geared to recursive Prolog
              procedures. It is similar to the structure editors built
              for many programming languages, except that instead of
              just ensuring the correctness of the syntax of the
              procedures builts by the editor, the editor also ensures
              the correct use of recursion. By correct we mean that
              the recursive procedure is guaranteed to terminate and
              to be well-defined. Within these constraints we
              have tried to ensure that the range of procedures that 
              can be built is as complete as possible.}
}

@TechReport{BrooksMillerRoperWood:1992,
  author      = {Andrew Brooks and James Miller and Marc Roper and
                 Murray Wood},
  title       = {Criticisms of an empirical study of recursion and
                 iteration},
  institution = {Empirical Foundations of Computer Science,
                 Department of Computer Science, University of
                 Strathclyde, Glasgow, United Kingdom},
  year        = 1992,
  number      = {EFoCS-1-92},
  abstract    = {The importance of empirical studies in software
                 engineering cannot be understated. Care must be
                 taken, however, that the experimental methods
                 employed are appropriate and that they are executed
                 with due scientific rigour. A critical commentary is
                 presented of a paper by Sinha and Vessey which
                 attempted empirical evaluations of a number of
                 propositions concerned with the notion of cognitive
                 fit (i.e. the notion that problem solving can be
                 facilitated by use of appropriate representations
                 and tools). There are concerns about the scale,
                 nature, and representation of the experimental
                 tasks. The entire experiment relies on the concept
                 of a naturally recursive task. There are also
                 concerns about the lack of information about the
                 subjects and their use of the programming
                 environments. Some criticisms are also presented of
                 the analysis of the results and the discussion. It
                 is concluded that the interpretations given [in the
                 paper criticised] carry no weight.}
}

@InProceedings{McKavanagh:1992,
  author       = {Charles William McKavanagh},
  title        = {Recursion in problem solving},
  booktitle    = {Proceedings of the Joint Conference of the
                  Australian Association for Research in Education and
                  the New Zealand Association for Research in
                  Education},
  year         = 1992,
  address      = {Victoria, Australia},
  month        = nov,
  organization = {Deakin University},
  abstract     = {A recursive model of problem solving is developed 
                  and methods for testing the model discussed. 
                  Recursion is a generative process which produces 
                  output through ordered stepping. The 
                  problem-solving model has a knowledge component in 
                  the form of directed acyclic networks and a
                  recursive process which manages problem solving by 
                  forward and backward stepping through the maze of 
                  structural knowledge. By reinterpreting knowledge 
                  structures recursively, it is possible to neatly 
                  explain the creation of new links. Also, tree 
                  hierarchies and linear sequences are shown to be 
                  substructures of directed acyclic networks, making 
                  the model consistent with many other schema 
                  theories.}
}

@Article{Anderson:1992,
  author   = {Oliver D. Anderson},
  title    = {Induction, recursion, and the {T}owers of {H}anoi},
  journal  = {International Journal of Mathematical Education in
              Science and Technology},
  year     = 1992,
  key      = 23,
  volume   = 3,
  pages    = {339--343},
  abstract = {We introduce the idea of recursion through simple
              examples of Pascal subroutines; and, discounting
              cases of tail recursion (which can be easily
              recoded as iterative loops, that are generally more
              efficient), we demonstrate how "stacking" can permit
              elegant and intellectually satisfying recursive
              solutions. We also emphasize the equivalence between
              recursive programming and mathematical induction. We
              complete our paper with an inductive and recursive
              discussion of the famous Bramah Temple puzzle, "The
              Towers of Hanoi".}
}

@PhdThesis{Bhuiyan:1992,
  author  = {Shawkat Hamid Bhuiyan},
  title   = {Identifying and supporting mental methods of
             recursion in a learning environment},
  school  = {University of Saskatchewan},
  address = {Saskatoon, Canada},
  month   = oct,
  year    = 1992}
}

@InProceedings{McCallaGreer:1992,
  author    = {Gordon I. McCalla and Jim E. Greer},
  title     = {Helping novices learn recursion: {G}iving
               granularity\hyp{}based advice on strategies and 
               providing support at the mental model level},
  booktitle = {Proceedings of the NATO Advanced Research Workshop
               on Cognitive Models and Intelligent Environments for
               Learning Programming},
  pages     = {57--71},
  year      = 1992,
  address   = {Genoa, Italy},
  month     = mar
}

@Article{Murnane:1992,
  author   = {John Murnane},
  title    = {To iterate or to recurse?},
  journal  = {Computers \& Education},
  year     = 1992,
  volume   = 19,
  number   = 4,
  pages    = {387--394},
  month    = nov,
  note     = {Elsevier Science, {ISSN} 0360-1315},
  abstract = {The control structure used in the initial teaching of
              indefinite loops has a very marked impact on
              students' progress and development. Whether to use
              iteration or recursion has been causing debate for
              many years. This paper examines some of the factors
              involved and describes some experience using both
              structures with tertiary students.}
}

@InProceedings{Dorf:1992,
  author       = {Mary Lou Dorf},
  title        = {Backtracking the rat way},
  booktitle    = {Proceedings of the Twenty\hyp{}third International
                  Technical Symposium on Computer Science Education},
  pages        = {272--275},
  year         = 1992,
  month        = mar,
  address      = {Kansas City, Missouri, USA},
  organization = {ACM SIGCSE},
  publisher    = {ACM Press},
  note         = {{ISBN} 0-89791-468-6},
  abstract     = {Have you ever mentioned recursion with backtracking
                  and had the students cringe? To some students who
                  have previously encountered recursion, the very
                  mention of the word is enough to strike terror in
                  their hearts. Once backtracking is added to the
                  concept of recursion, they are ready to flee the
                  room and the course. The following method of
                  presenting backtracking via recursion may change
                  student terror to titillation.}
}

@InProceedings{BhuiyanGreerGordon:1992,
  author    = {Shawkat Bhuiyan and Jim E. Greer and Gordon I. McCalla},
  title     = {Learning recursion through the use of a mental
               model\hyp{}based programming environment},
  booktitle = {Proceedings of the Second International Conference on
               Intelligent Tutoring Systems},
  pages     = {50--57},
  year      = 1992,
  month     = jun,
  address   = {Montr\'eal, Canada},
  volume    = 608,
  series    = {LNCS},
  publisher = {Springer},
  note      = {{ISBN} 3-540-55606-0},
  abstract  = {The mental model-based learning environment, PETAL,
               externalizes mental models for generating recursive
               programs into Programming Environment Tools
               (PETs). Such externalization supports cognitive and
               meta-cognitive problem-solving activity. PETs seem
               to help students internalize concepts, organize
               relevant knowledge, and lead to improved
               learning. The paper describes an empirical study to
               evaluate PETAL. Excerpts from protocols are
               discussed to show the evolution of one student's
               knowledge about recursion and recursive programming,
               the change from novice level to expert level induced
               by the PETs. Finally, the paper makes suggestions
               for incorporating cognitive support through user
               interfaces into Intelligent Tutoring Systems
               (ITSs).}
}

@InProceedings{Moreno:1992,
  author       = {Luis Moreno-Armella},
  title        = {Visualizaci\'on y recursividad: un enfoque
                  computacional},
  booktitle    = {Congreso Iberoamericano de Inform\'atica Educativa},
  year         = 1992,
  address      = {Santo Domingo, Rep\'ublica Dominicana},
  month        = jun,
  organization = {CYTED/RIBIE},
  abstract     = {La pantalla de la computadora suministra un ambiente
                  donde la interacción entre lo visual y lo simbólico 
                  puede ser aprovechada para que el estudiante, a
                  través de actividades diseñadas por el profesor, 
                  (re)-produzca el conocimiento matemático pertinente.
                  Esta producción está íntimamente vinculada a la 
                  gestación de un contexto, al interior del cual se
                  organizan los significados matemáticos. La
                  computadora permite, al ejecutar el código que 
                  "captura" un algoritmo, la exteriorización del 
                  conocimiento del estudiante. Esto posibilita la
                  reflexión del estudiante sobre sus acciones mentales
                  y el proceso de socialización del conocimiento. En
                  este artículo se propone la exploración, mediantes
                  la gráficación, de los procesos recursivos, en el 
                  contexto suministrado por un enfoque constructivista
                  de la educación matemática.}
}

@InBook{Harvey:1992,
  author    = {Brian Harvey},
  title     = {Learning mathematics and {LOGO}},
  chapter   = {Avoiding recursion},
  publisher = {The MIT Press},
  year      = 1992,
  address   = {Cambridge, Massachusetts, USA},
  pages     = {393--426},
  note      = {{ISBN} 0-262-08207-1}
}

@Article{SinhaVessey:1992,
  author   = {Atish P. Sinha and Iris Vessey},
  title    = {Cognitive fit: an empirical study of recursion and
              iteration},
  journal  = {IEEE Transactions on Software Engineering},
  year     = 1992,
  volume   = 18,
  number   = 5,
  pages    = {368--379},
  month    = may,
  note     = {IEEE Press, {ISSN} 0098-5589},
  abstract = {A laboratory experiment was conducted to assess the
              basic theory and extensions to the theory for
              recursive tasks across programming languages. The
              experiment used 34 LISP and 48 Pascal computer
              science students in two repeated measures
              designs. Findings of the study are reported and
              analyzed. The results strongly suggest that
              investigation of programming constructs should take
              place in the context of specific programming
              languages. Since a number of languages provide
              similar kinds of programming constructs, it is
              difficult for programmers to choose those
              implementations that best suit their needs. One way
              of encouraging the use of desirable constructs would
              be to develop languages adapted to certain types of
              tasks. Such an approach would inherently lead to
              cognitive fit and the attendant performance benefits
              would be realized.}
}


@Article{KaserRamakrishnanPawagi:1993,
  author  = {Owen Kaser and C. R. Ramakrishnan and Shaunak Pawagi},
  title   = {On the conversion of indirect to direct recursion},
  journal = {ACM Letters on Programming Languages and Systems 
             (LOPLAS)},
  volume  = 2,
  number  = {1-4},
  pages   = {151--164},
  date    = {1993-03-01/1993-12-31}
}

@PhdThesis{Wu:1993,
  author   = {Cheng-Chih Wu},
  title    = {Conceptual models and individual cognitive learning
              styles in teaching recursion to novices},
  school   = {University of Texas},
  year     = 1993,
  address  = {Austin, Texas, USA},
  note     = {192 pages},
  abstract = {This study investigated how different types of
              conceptual models and cognitive learning styles
              influence novice programmers when learning
              recursion. A pretest-posttest, 2 X 2 (conceptual
              models X learning styles) factorial experimental
              design was implemented in order to study the
              problem. Two hundred thirty-seven students enrolled
              in an introductory computer science course at a
              major southwest research university served as the
              subjects for this study. Subjects were randomly
              assigned to either an abstract model group or a
              concrete model group and the groups were of
              approximately equal size. Different conceptual
              models (abstract or concrete) were used to present
              recursion to the two model groups. Within each model
              group, subjects were identified as either an
              abstract learner or a concrete learner based on
              their scores on the scrambled Kolb's Learning-Style
              Inventory 1985. A posttest and two retention tests
              were administered after the treatment to compare
              students' performance in different groups. A pretest
              administered prior to the treatment was used to
              equate the variance caused by students' prior
              knowledge in the statistical analysis. The
              statistical procedure of two-way ANCOVA was employed
              to analyze all of the performance data.  The
              findings of this study are: Concrete conceptual
              models were better than abstract conceptual models
              in teaching recursion to novice programmers. However, 
              the teaching effects weakened several weeks after 
              classroom instruction. Novice programmers with abstract 
              learning styles performed better than those with
              concrete learning styles when  learning recursion. 
              Finally, abstract learners did
              not necessarily benefit more from abstract
              conceptual models, and concrete learners did not
              necessarily benefit more from concrete conceptual
              models.  A replication study with a longer treatment
              period that covers more aspects of recursive
              programming is recommended for future
              research. Additional research needs to be conducted
              to better understand students' mental models of
              recursion. Furthermore, future research should
              investigate how the other dimension of Kolb's
              learning styles (i.e., active-reflective) relates to
              the instructional methods provided. It is also
              recommended that the relationship between the
              characteristic of learning tasks (or domains) and
              the matching of learning styles with conceptual
              models be investigated.}
}

@InBook{McCallaGreer:1993,
  author    = {Gordon I. McCalla and Jim E. Greer},
  title     = {Cognitive models and intelligent environments for
               learning programming},
  chapter   = {Two and one-half approaches to helping novices learn
               recursion},
  publisher = {Springer Verlag},
  year      = 1993,
  month     = aug,
  pages     = {185--197},
  note      = {{ISBN} 0387565809},
  abstract  = {In this chapter we discuss two approaches to supporting
               students learning recursion, and then introduce a
               third simpler approach that may in some
               circumstances prove to be useful. The first approach
               is exemplified by the SCENT advisor which aims to
               provide relevant advice to novice programmers on
               their recursive programming strategies. In this
               approach, knowledge of typical novice strategies is
               internalized in the system in order that it can
               understand and comment upon student code. The second
               approach is illustrated by the PETAL support
               environment in which students choose among three
               Programming Environment Tools (PETs) that scaffold
               their use of three different mental model-level
               problem solving methodologies as they solve
               recursive problems. Knowledge of the different
               problem solving methodologies is externalized in
               PETAL's design, although the system itself does not
               contain any internalized knowledge of student mental
               model-level reasoning. The third approach, reified
               in the G.E.N.I.U.S. PL/C advisor, does an end run
               around the need for deep knowledge by taking
               advantage of idiosyncracies in the relationship
               between the novice programmer and a supposed
               expert. Although in many ways this is a half-baked
               approach, it suggests the possibility of achieving
               robust and helpful performance with little knowledge
               engineering.}
}

@InProceedings{Astrachan:1994,
  author       = {Owen Astrachan},
  title        = {Self-reference is an illustrative essential},
  booktitle    = {Proceedings of the Twenty\hyp{}fifth International
                  Technical Symposium on Computer Science Education}, 
  pages        = {238--242},
  year         = 1994,
  address      = {Phoenix, Arizona, USA},
  organization = {ACM SIGCSE},
  publisher    = {ACM Press},
  note         = {{ISBN} 0-89791-646-8},
  abstract     = {This paper includes an abstract, a discussion of the
                  usefulness of self-reference in early computer
                  science courses, and some examples to illustrate
                  this usefulness. Most readers will not be troubled
                  by this example of self-referential writing. Why
                  then is self-reference, usually in the form of
                  recursive subprograms, thought to be so onerous as
                  to be placed in its own
                  left-until-the-end-and-often-uncovered chapter in
                  most introductory texts? Self-reference is one of
                  the cornerstones of computer science from the
                  unsolvability of the halting problem, to writing a
                  Pascal compiler in Pascal, to reveling in the beauty
                  of Quicksort. We argue that the notion of
                  self-reference should permeate first courses in
                  computer science. If this is to be the case such
                  courses should take a view far broader than “Wow, I
                  can average 10 numbers with the skills I learned in
                  my first programming course!”}
}

@Article{WilcoksSanders:1994,
  author   = {Derek Wilcocks and Ian Sanders},
  title    = {Animating recursion as an aid to instruction},
  journal  = {Computers \& Education},
  year     = 1994,
  volume   = 23,
  number   = 3,
  pages    = {221--226},
  month    = nov,
  note     = {Elsevier Science, {ISSN} 0360-1315},
  abstract = {This paper presents a method for overcoming one of the
              most difficult problems in teaching programming to
              first-year university students, namely recursion. It
              is established that what is required to understand
              recursion is an abstracted mental model of recursive
              flow of control. The model which is deemed most
              suitable for the purposes of this research is the
              copies model of recursion. In this model, recursive
              instantiations are seen as copies of the recursive
              function. In order to present this model to
              students, a program (as opposed to data or
              algorithm) animator is employed. This animator takes
              any Pascal program containing a recursive function
              and presents the student with a dynamic copies model
              of the recursive function.}
}

@Article{BhuiyanGreerGordon:1994,
  author   = {Shawkat Bhuiyan and Jim E. Greer 
              and Gordon I. McCalla},
  title    = {Supporting the learning of recursive problem 
              solving},
  journal  = {Interactive Learning Environments},
  year     = 1994,
  volume   = 4,
  number   = 2,
  pages    = {115--139},
  abstract = {This research is about the problem solving
              activities of novice programmers as they learn to
              create recursive LISP programs. Their problem
              solving not only includes the issue of mental
              models, but also how to use these mental models in
              conjunction with other problem solving
              techniques. In fact, at various stages of their
              learning, learners seem to use different packages of
              problem solving methods. Each of these packages we
              call a mental method. In this paper, we discuss the
              PETAL learning environment which assists learners in
              the use of three of these mental methods: the
              syntactic method, the analytic method and the
              analysis/synthesis method. PETAL externalizes each
              mental method through its own customized interface,
              called a programming environment tool (PET). Such
              externalization helps learners internalize concepts,
              and organize relevant knowledge and generally leads
              to improved learning.}
}

@InProceedings{GreerMcCallaPriceHolt:1994,
  author    = {Jim E. Greer and Gordon I. McCalla and Bob Price and
               Peter Holt},
  title     = {Supporting the learning of recursion at a distance},
  booktitle = {Proceedings of the World Conference on Educational
               Multimedia and Hypermedia (ED-MEDIA)},
  pages     = 652,
  year      = 1994,
  address   = {Vancouver, British Columbia, Canada},
  month     = jun
}

@Article{Segal:1994,
  author   = {Judith Segal},
  title    = {Empirical studies of functional programming
              learners evaluating recursive functions},
  journal  = {Instructional Science},
  year     = 1994,
  volume   = 22,
  number   = 5,
  pages    = {385--411},
  month    = sep,
  note     = {Springer, {ISSN} 0020-4277},
  abstract = {In this paper, we report some empirical studies of
              students evaluating recursive functions defined
              according to the rules of the functional programming
              language Miranda, and describe the misconceptions
              and processing strategies observed. We then discuss
              the implications of these observations as regards
              teaching content.}
}

@Article{Er:1995,
  author   = {M. C. Er},
  title    = {Process frame: a cognitive device for recursion
              comprehension},
  journal  = {Computers \& Education},
  year     = 1995,
  volume   = 24,
  number   = 1,
  pages    = {31--36},
  month    = jan,
  note     = {Pergamon-Elsevier Science, {ISSN} 0360-1315},
  abstract = {In the literature, a distinction is often made between
              the concept of recursion and its implementation,
              using analogies and models for explaining both. Some
              models of recursion and pedagogical methods of
              explaining recursion to beginners of computer
              programming classes are found to be inadequate,
              ineffective, defective, and even dangerously
              misleading. This paper reports a cognitive device,
              called process frame, and illustrates in great
              detail how to use it to explain recursion and
              recursive process structures. The strength of this
              cognitive device is that it can explain both a
              concept of recursion and its implementation
              correctly with clarity. It has been used in numerous
              programming classes successfully.}
}

@InProceedings{Burton:1995,
  author    = {C. T. Peter Burton},
  title     = {Conceptual structures for recursion},
  booktitle = {Proceedings of the First International Symposium on
               Functional Programming Languages in Education},
  pages     = {179--193},
  year      = 1995,
  volume    = 1022,
  series    = {LNCS},
  month     = dec,
  address   = {Nijmegen, The Netherlands},
  publisher = {Springer},
  note      = {{ISBN} 978-3-540-60675-8},
  abstract  = {Consideration will be given to the perplexity students
               experience with recursive function definitions.
               Certain conceptual structures will be suggested,
               which might provide a path through the thicket. In
               particular, emphasis will be placed on decisions
               that a programmer makes during the course of
               designing a recursive definition. By drawing
               attention to these decisions—by classifying them
               and making them explicit—it is possible to
               delineate the kind of "space" within which
               creativity operates. To vivify this, a rudimentary
               taxonomy of recursive function definitions will be
               sketched here. It will be illustrated in a
               particular application area, involving a family of
               simple string-processing tasks. This will highlight
               two different kinds of structure: (i) classification
               of different tasks within the family, (ii)
               classification of different approaches to a single
               task. Some of the points to be raised are not
               specific to recursion; accordingly, connections will
               be drawn here and there with certain more general
               pedagogical themes promulgated by Peter Landin in
               recent years.}
}

@InProceedings{ClackMyers:1995,
  author    = {Chris D. Clack and Colin Myers},
  title     = {The dys\hyp{}functional student},
  booktitle = {Proceedings of the First International Symposium on
               Functional Programming Languages in Education},
  pages     = {289--309},
  year      = 1995,
  number    = 1022,
  series    = {LNCS},
  address   = {Nijmegen, The Netherlands},
  publisher = {Springer},
  note      = {{ISBN} 978-3-540-60675-8},
  abstract  = {Functional languages liberate students from complex
               syntax, complex semantics and complex memory
               allocation; allowing them to concentrate on
               problem solving. However, functional programming is not
               a panacea. Students still have problems with languages 
               features, program concepts and the legacy of the
               imperative paradigm. This paper aims to assist the
               lecturer asked to teach a functional language for the 
               first time. We present typical student mistakes, 
               attempt to explain why these mistakes arise, and
               propose possible remedies.}
}

@Article{Haynes:1995,
  author   = {Susan Makrouhee Haynes},
  title    = {Explaining recursion to the unsophisticated},
  journal  = {The SIGCSE Bulletin},
  year     = 1995,
  volume   = 27,
  number   = 3,
  pages    = {3--6},
  month    = sep,
  note     = {ACM Press, {ISSN} 0097-8418},
  abstract = {This paper addresses the topic of explaining recursion
              to beginning programmers. It briefly presents the common
              approaches, then describes an extension to those methods
              called activation tree.}
}

@InProceedings{George:1995,
  author    = {Carlisle Eldwidge George},
  title     = {Supporting the learning of recursion},
  booktitle = {Proceedings of the Conference on the Teaching of
               Computing},
  year      = 1995,
  address   = {Dublin City University, Ireland},
  month     = aug,
  abstract  = {The paper reports on an investigation into a novel
               approach to helping students learn recursion in
               Pascal. Our approach, implemented in software (the
               EROSI tutor) is hypothesised to support the
               acquisition (by novice programmers) of a mental
               model which will facilitate the comprehension and
               use of recursion as a problem solving technique in
               programming. Using visualisation and animation the
               EROSI tutor simulates a sophisticated execution
               model of subprograms that progressively and linearly
               extends to a 'copies' model of recursion, which
               experts possess. We discuss the background to our
               approach, our subprogram execution model, the EROSI
               software prototype and briefly comment on some
               findings of a preliminary study.}
}

@InProceedings{HuiIverson:1995,
  author       = {Roger K. W. Hui and Kenneth E. Iverson},
  title        = {Representations of recursion},
  booktitle    = {Proceedings of the Conference on Applied Programming
                  Languages},
  pages        = {91--97},
  year         = 1995,
  month        = jun,
  address      = {San Antonio, Texas, USA},
  organization = {ACM SIGAPL},
  publisher    = {ACM Press},
  note         = {{ISBN} 0-89791-722-7},
  abstract     = {Recursive definitions and important tools
                  mathematics and in programming. They can be
                  represented in a variaty of ways, and in this paper
                  we examine the relations and translations between
                  them, using a range of examples for
                  illustration. These examples begin with recursive
                  definitions expressed in conventional SHARP APL, and
                  in APL2; most are drawn from published sources.}
}

@InBook{Knuth:1996,
  author    = {Donald E. Knuth},
  title     = {Selected papers on Computer Science},
  chapter   = {Von Neumann's First Computer Program},
  publisher = {CSLI Publications},
  year      = 1996,
  number    = 59,
  series    = {CSLI Lecture Notes},
  address   = {Stanford University, California, USA},
  pages     = {205--226}
}

@Article{Soare:1996,
  author  = {Robert I. Soare},
  title   = {Computability and Recursion},
  journal = {The Bulletin of Symbolic Logic},
  year    = 1996,
  volume  = 2,
  number  = 3,
  pages   = {284--321},
  month   = sep
}

@InProceedings{WuLinChiou:1996,
  author       = {Cheng-Chih Wu and Janet Mei-Chuen Lin 
                  and Guey-Fa Chiou},
  title        = {Visualizing recursion and linked lists},
  booktitle    = {Proceedings of the First Conference on Integrating
                  Technology into Computer Science Education},
  pages        = {232--232},
  year         = 1996,
  address      = {Barcelona, Spain},
  month        = jun,
  organization = {ACM SIGCSE\hyp{}SIGCUE},
  publisher    = {ACM Press},
  note         = {{ISBN} 0-89791-844-4}
}

@InProceedings{Denman:1996,
  author       = {Richard T. Denman},
  title        = {Derivation of recursive algorithms for {CS2}},
  booktitle    = {Proceedings of the Twenty\hyp{}seventh International
                  Technical Symposium on Computer Science Education},
  pages        = {9--13},
  year         = 1996,
  address      = {Philadelphia, Pennsylvania, USA},
  organization = {ACM SIGCSE},
  publisher    = {ACM Press},
  note         = {{ISBN} 0-89791-757-X},
  abstract     = {The unifying theme of the computing curriculum in our
                  department is the derivation of programs from
                  specifications. In [7], a rationale was given for
                  this approach, as was a detailed discussion of the
                  CS1 course. The purpose of this article is to
                  illustrate how the more challenging algorithms of
                  CS2 may be derived using proof rules for recursive
                  procedures.}
}

@Article{AbramovichPieper:1996,
  author  = {Sergei Abramovich and Anne Pieper},
  title   = {Fostering recursive thinking in combinatorics
             through the use of manipulatives and computing
             technology},
  journal = {The Mathematics Educator},
  year    = 1996,
  volume  = 7,
  number  = 1,
  note    = {Summer issue}
}

@Article{GoodBrna:1996,
  author    = {Judith Good and Paul Brna},
  title     = {Scaffolding for recursion; can visual languages help?},
  publisher = {The Institute of Electrical Engineers},
  year      = {1996},
  month     = jan,
  journal   = {IEE Seminar Digests},
  volume    = {10},
  number    = {7},
  pages     = {1--3},
  address   = {London, United Kingdom},
  abstract  = {It may be that visual programming languages (VPLs) are 
               best used as a form of "scaffolding" for novices, 
               whereby a graphical environment provides support until 
               such time as novices are able to transfer to a 
               text-based programming language. Before creating such 
               an environment however, we need evidence that VPLs 
               really are of benefit 
               to novices rather than appealing to common-sense 
               conjectures. We have selected a key issue that novices 
               find particularly difficult---recursion---and consider 
               both whether VPLs actually do scaffold the novice 
               programmer in any significant way and whether there is 
               any promise of improvement in the near future. We 
               conclude that recursion is not scaffolded by current 
               VPLs any more than by current text-based programming 
               languages. However, there is some evidence that it is 
               possible to provide support for comprehension, 
               although this support may be impractical if the main 
               use of the representation is that of construction. The 
               more effective representation can be thought of as the 
               application of a sequence of “unfolding” operations. We 
               therefore suggest a representation which incorporates 
               a specific symbol indicating recursion. We hypothesise 
               that novices, given tools of this kind, should 
               benefit from building programs with this structure 
               visible.}
}

@PhdThesis{George:1996,
  author = {Carlisle Eldwidge George},
  title  = {Investigating the effectiveness of a
            software\hyp{}reinforced approach to understanding
            recursion},
  school = {University of London, London, United Kingdom},
  year   = 1996,
  note   = {275 pages}
}

@Article{Ben-AriReich:1996,
  author   = {Mordechai Ben-Ari},
  title    = {Recursion: from drama to program},
  journal  = {Aspects of Teaching Computer Science},
  year     = 1996,
  volume   = 7,
  pages    = {45--47},
  abstract = {This paper describes a novel approach to teaching
              recursion: couple a real-world problem that can be
              dramatized to a programming problem whose solution
              exactly parallels the dramatization. Three such
              pairs of problems are presented in order of
              difficulty: a procedure, a function and a procedure
              with two recursive invocations. We also show how
              the program for the Towers of Hanoi can be made to
              parallel the algorithm for playing the game.}
}

@Article{dichevaClose:1996,
  author   = {Darina Dicheva and John Close},
  title    = {Mental models of recursion},
  journal  = {Journal of Educational Computing Research},
  year     = 1996,
  volume   = 14,
  number   = 1,
  pages    = {1--23},
  abstract = {This article presents the results of a two-year study 
              of children's difficulties in learning the concept of 
              recursion in Logo. A number of incorrect mental models 
              of recursion identified in the study are described. 
              These are classified into main groups: mental models 
              associated with the interpretation of recursive 
              procedures and those associated with the construction of 
              recursive procedures. Misconceptions underlying the 
              erroneous mental models are presented. Possible reasons 
              for adopting these misconceptions are put forward.}
}

@Book{RosensteinFranzblauRoberts:1997,
  editor    = {Joseph G. Rosenstein and Deborah S. Franzblau and
               Fred S. Roberts},
  title     = {Discrete Mathematics in the Schools},
  publisher = {American Mathematical Society and National Council
               of Teachers of Mathematics},
  year      = 1997,
  volume    = 36,
  series    = {DIMACS Series in Discrete Mathematics and
               Theoretical Computer Science},
  note      = {Proceedings of a conference at Rutgers University in
               1992}
}

@Book{FelleisenFriedman:1997,
  author    = {Matthias Felleisen and Daniel P. Friedman},
  title     = {A little {J}ava, a few patterns},
  publisher = {The MIT Press},
  year      = 1997,
  month     = dec,
  note      = {{ISBN} 0-262-56115-8}
}

@InProceedings{Proulx:1997,
  author       = {Viera Krnanov{\'a} Proulx},
  title        = {Recursion and grammars for {CS2}},
  booktitle    = {Proceedings of the Second Conference on Integrating
                  Technology into Computer Science Education},
  pages        = {74--76},
  year         = 1997,
  month        = jun,
  address      = {Uppsala, Sweden},
  organization = {ACM SIGCSE\hyp{}SIGCUE},
  publisher    = {ACM Press},
  note         = {{ISBN} 0-89791-923-8},
  abstract     = {A programming exercise on recursion in which
                  students create drawings of simple and bracketed
                  Lindenmayer Systems provides a context for exploring
                  additional computer science concepts. The resulting
                  drawings give students a better understanding of the
                  power of recursion as well as the rate of growth of
                  time complexity with multiple successive recursive
                  calls. We describe the exercise, the concepts that
                  need to be addressed to solve the problems, and the
                  results of using this exercise in our classes.}
}

@InProceedings{CloseDicheva:1997,
  author    = {John Close and Darina Dicheva},
  title     = {Misconceptions in recursion: diagnostic teaching},
  booktitle = {Proceedings of the European {LOGO} Conference (Mental
               Models of Recursion)},
  year      = 1997,
  address   = {Budapest, Hungary},
  month     = aug,
  abstract  = {The paper describes a diagnostic teaching approach to
               recursion in {LOGO}. The approach involves a general
               strategy for teaching recursion and specific
               teaching tactics for alleviating the misconceptions
               which underlie flawed mental models of the recursive
               process possessed by particular learners. The
               erroneous mental models and underlying
               misconceptions had been identified and described in
               an earlier study by the two authors. Further
               research to test the approach is recommended.}
}

@Article{Howland:1998,
  author  = {John E. Howland},
  title   = {Recursion, iteration and functional languages},
  journal = {Journal for Computing in Small Colleges},
  year    = 1998,
  volume  = 13,
  number  = 4,
  month   = apr,
  abstract = {Functional programming languages are shown to be useful 
              in the teaching of the concepts of recursion and 
              iteration. The functional language approach presented 
              in this paper has advantages over imperative languages 
              in the area of analysis of recursive and iterative 
              algorithms. Examples using the J and Scheme programming 
              languages, with emphasis on the use of functional 
              programming notation in exposition are given.}
}

@InProceedings{WuLeeMei:1998,
  author       = {Chen-Chih Wu and Greg C. Lee
                  and Janet Mei-Chuen Lin},
  title        = {Visualizing programming in recursion and linked 
                  lists},
  booktitle    = {Proceedings of the Australasian Conference on
                  Computer Science Education},
  pages        = {180--186},
  year         = 1998,
  volume       = 3,
  address      = {University of Queensland, Queensland, Australia},
  month        = jul,
  organization = {ACM SIGCSE},
  publisher    = {ACM Press},
  note         = {{ISBN} 1-58113-018-X},
  abstract     = {In this paper we present the new versions of two
                  software packages, SimLIST and SimRECUR. The new
                  user interface and the added visualizing programming
                  feature of the software are described. Closed-lab 
                  exercise using SimLIST was conducted to better
                  understand the suitability of using such software as
                  visualization tools. The results of a survey after
                  the lab exercise give indications that this hands-on
                  approach to learning abstract concepts is a step in
                  the right direction.}
}

@InProceedings{WuDaleBethel:1998,
  author       = {Cheng-Chih Wu and Nell B. Dale
                  and Lowell J. Bethel},
  title        = {Conceptual models and cognitive learning styles in
                  teaching recursion},
  booktitle    = {Proceedings of the Twenty\hyp{}ninth International
                  Technical Symposium on Computer Science Education},
  pages        = {292--296},
  year         = 1998,
  month        = mar,
  address      = {Atlanta, Georgia, USA},
  organization = {ACM SIGCSE},
  publisher    = {ACM Press},
  note         = {{ISBN} 0-89791-994-7},
  abstract     = {An experimental research design was implemented in 
                  an attempt to understand how different types of
                  conceptual models and cognitive learning styles
                  influence novice programmers when learning
                  recursion. The results indicate that in teaching
                  recursion to novice programmers: (*) concrete
                  conceptual models are better than abstract
                  conceptual models; (*) novices with abstract
                  learning styles perform better than those with
                  concrete learning styles; (*) abstract learners do
                  not necessarily benefit more from abstract
                  conceptual models; and (*) concrete learners do
                  not necessarily benefit more from concrete
                  conceptual models.}
}

@Article{Chen:1998,
  author   = {Ming-Puu Chen},
  title    = {The effect of dynamic copies model in teaching
              recursive programming},
  journal  = {Journal of Taiwan Normal University},
  year     = 1998,
  volume   = 43,
  number   = 1,
  pages    = {63--78},
  abstract = {The copies model of recursion was implemented in two
              versions of computer-based instruction (dynamic
              vs. static) in this study. For the immediate effects, 
              dynamic copies model was more effective than static
              copies model in teaching recursion. High prior knowledge
              students performed better than low prior knowledge
              students no matter they were instructed with the dynamic
              or static model. For the delayed effects, ATI was found.
              High prior knowledge students benefited from the static
              copies model instruction more than from the dynamic 
              copies model. In contrast, low prior knowledge students 
              benefited from the dynamic copies model more than from 
              the static copies model.}          
}

@Unpublished{Dijkstra:1999,
  author = {Edsger Wybe Dijkstra},
  title  = {Computing {S}cience: {A}chievements and {C}hallenges},
  note   = {(Dijkstra archive EWD1284)},
  month  = mar,
  year   = 1999
}

@Article{Robertson:1999,
  author   = {John S. Robertson},
  title    = {How many recursive calls does a recursive function
              make?},
  journal  = {The SIGCSE Bulletin},
  year     = 1999,
  volume   = 31,
  number   = 2,
  month    = jun,
  abstract = {The calculation of the Fibonacci sequence using
              recursion gives rise to an interesting question: How
              many times does a recursive function call itself?
              This paper presents one way to examine this question
              using difference equations with initial conditions,
              or discrete dynamical systems (DDS). We show that
              there is a linear relationship between the Fibonacci
              numbers themselves and the number of recursive
              calls. This relationship generalizes to any type of
              DDS of second-order, and DDS of higher-order.}
}

@Article{JehngTungChang:1999,
  author   = {Jihn-Chang J. Jehng and Sho-Huan Tung and Ching-Tao
              Chang},
  title    = {A visualisation approach to learning the concept of
              recursion},
  journal  = {Journal of Computer Assisted Learning},
  year     = 1999,
  volume   = 15,
  number   = 4,
  pages    = {279--290},
  month    = dec,
  note     = {Wiley\hyp{}Blackwell, {ISSN} 0266-4909},
  abstract = {This study investigated how a schematic-based
              visualisation approach implemented in an electronic
              learning environment facilitated the learning of the
              complex programming concept. The semantic-based
              visualisation approach applied Visualcode Rules and
              utilised various pictorial notations modeling the
              execution of recursive procedures. In this study, 38
              college students studied the Scheme language and its
              recursive procedures in three different
              conditions. The three conditions were (a) the
              VisualScheme environment in which schematic-based
              pictorial notations (e.g. coloured icons and
              environment trees) were employed to help learners
              trace intermediate steps of executing procedures;
              (b) an Internet learning environment in which an
              ordered sequence of static pictorial notations
              provide a snap shot and illuminate execution of
              recursive procedures; (c) an Internet learning
              environment in which on-line source codes were
              annotated with detailed textual information. Results
              of the study indicated schematic-based pictorial
              notations helped students to form a better
              conceptual framework for learning the concept of
              recursion. It is suggested that the design of an
              electronic learning environment may appropriately
              apply meaningful pictorial information to help
              students learn complex programming concepts.}
}

@InProceedings{Velazquez:1999,
  author    = {Jes\'us \'Angel Vel\'azquez-Iturbide},
  title     = {A progressive approach to recursion},
  booktitle = {Proceedings of the Twenty\hyp{}ninth Conference on the
               Frontiers in Education},
  pages     = {34--38},
  year      = 1999,
  volume    = 1,
  address   = {San Juan, Puerto Rico},
  month     = nov,
  publisher = {IEEE},
  note      = {{ISBN} 0-7803-5643-8},
  abstract  = {We propose a progressive approach to simplify teaching
               recursion. It is introduced by means of three
               instances of increasing level of difficulty. First,
               recursion is introduced in a "pure" form as it is
               found in formal grammars; its accompanying
               mechanisms are related to rewriting. Later, a
               functional programming language allows defining
               recursive functions and recursive data types; its
               mechanisms are associated to algorithmics and
               rewriting. Finally, recursion is shown in imperative
               languages, together with mechanisms about
               algorithmics and state transformations.  The
               approach has three main advantages. First, the
               student perceives recursion as a recurrent concept
               in the discipline of computer science, not only
               existing in imperative programming. Second, the
               concept of recursion is isolated and differentiated
               from other concepts or mechanisms which are
               associated to particular instances of recursion. 
               Finally, the teaching of recursion is simplified 
               because it is taught in a progressive way.}
}

@Article{TurbakRoydenStephanHerbst:1999,
  author   = {Franklyn Turbak and Constance Royden and Jennifer
              Stephan and Jean Herbst},
  title    = {Teaching recursion before loops in {CS1}},
  journal  = {Journal of Computing in Small Colleges},
  year     = 1999,
  volume   = 14,
  number   = 4,
  pages    = {86--101},
  month    = may,
  abstract = {Traditionally, loops are a central topic in a CS1      
              course but recursion is viewed as an advanced topic 
              that is either taught near the end of the course or not 
              taught at all. Taking a cue from the function-oriented 
              programming community, we argue that there are strong 
              pedagogical reasons for teaching recursion before loops 
              in a CS1 course, regardless of what programming 
              paradigm is taught. In our approach, recursion is 
              presented as an instance of the classic "divide, 
              conquer, and glue" problem solving strategy. Iteration 
              is then presented as a particular pattern of recursion. 
              Finally, loop constructs are presented as concise 
              idioms for iterative patterns. We describe our positive 
              experience in adopting this approach in a CS1 course 
              and highlight the aspects of the course that we think 
              contribute to its success.}
}

@InProceedings{GinatShifroni:1999,
  author       = {David Ginat and Eyal Shifroni},
  title        = {Teaching recursion in a procedural
                  environment---{H}ow much should we emphasize the
                  computing model?},
  booktitle    = {Proceedings of the International Technical Symposium
                  on Computer Science Education},
  pages        = {127--131},
  year         = 1999,
  month        = mar,
  address      = {New Orleans, Louisiana, USA},
  organization = {ACM SIGCSE},
  publisher    = {ACM Press},
  note         = {{ISBN} 1-58113-085-6},
  abstract     = {Recursion is a powerful and essential computational
                  problem solving tool, but the concept of recursion
                  is difficult to comprehend. Students that master the
                  conventional programming construct of iteration in
                  procedural programming environments, find it hard to
                  utilize recursion. This study started as a test of
                  CS College students' utilization of recursion. It
                  was conducted after they have completed CS1, where
                  they studied recursion with the C programming
                  language. The test revealed that students adhere to
                  the iterative pattern of "forward accumulation", due
                  to their confidence with the iteration construct,
                  but lack of trust of the recursion mechanism. These
                  results motivated us to get more insight into the
                  nature of recursion difficulties and ways to
                  overcome them. In this paper we describe the
                  difficulties we observed, and present a declarative,
                  abstract, approach that contributed to overcome
                  them. We question the emphasis that should be put on
                  the basic computing model when presenting recursion,
                  and argue for emphasis on the declarative approach
                  for teaching recursion formulation in a procedural
                  programming environment.},
  comment      = {Recursion is hard to learn after learning
                  iteration. Study on college CS students: they
                  already learnt C and recursion. Recursion is traced
                  or animated, but this is too low-level (not
                  declarative enough): the authors want to question
                  that trend. Recursion is harder to trace than
                  iteration. Iteration leads to incorrect mental
                  models when learning recursion (only "copies model"
                  is considered correct by Kahney): the latter is
                  thought as an expression of the familiar counting
                  and accumulation technique within loops; the
                  recursive call is not the consequence of the
                  analysis of the original problem but is thought
                  bottom-up, from the previous, low-level computing
                  model. The base case is viewed as a stopping
                  condition as if in a loop (thus recursive calls not 
                  in tail form are wrong). Teachers of C tend to
                  emphasise iterations.}
}

@Article{ChangWangDaiSung:1999,
  author  = {Kuo-En Chang and Kang-Yuu Wang and Chien-Yun Dai
             and Teh-Chung Sung},
  title   = {Learning recursion through a collaborative
             {S}ocratic dialectic process},
  journal = {Journal of Computers in Mathematics and Science 
             Teaching},
  year    = 1999,
  volume  = 18,
  number  = 3,
  pages   = {303--315},
  note    = {Association for the Advancement of Computing in
             Education (AACE), Charlottesville, Virginia,
             USA. {ISSN} 0731-9258}
}

@InProceedings{Zelenski:1999,
  author    = {Julie Zelenski},
  title     = {Nifty {A}ssignments},
  booktitle = {Proceedings of the Thirtieth SIGCSE Technical 
               Symposium on Computer Science Education},
  pages     = 355,
  year      = 1999,
  month     = mar
}

@Article{Kay:2000,
  author  = {Jennifer S. Kay},
  title   = {Using the force: how {S}tar {W}ars can help you teach 
             recursion},
  journal = {Journal of Computing Sciences in Small Colleges},
  year    = 2000,
  volume  = 15,
  number  = 5,
  pages   = {277--288},
  month   = may
}

@InBook{Knuth:2000,
  author    = {Donald E. Knuth},
  title     = {Selected {P}apers on the {A}nalysis of {A}lgorithms},
  chapter   = {Textbook Examples of Recursion},
  publisher = {CSLI Publications},
  year      = 2000,
  pages     = {391--414},
}

@Article{Levine:2000,
  author   = {David B. Levine},
  title    = {Helping students through multiplicities},
  journal  = {Journal of Computing Sciences in Colleges},
  year     = 2000,
  volume   = 15,
  number   = 5,
  pages    = {285--291},
  month    = may,
  note     = {{ISSN} 1937-4771},
  abstract = {Introductory students experience many cognitive hurdles
              as they begin to learn the intricacies involved in
              writing computer programs. One such challenge is
              learning to distinguish between the state
              information that is attached to data (e.g., instance
              variables) and information that is intrinsically
              attached to code (e.g., location within a
              program). This problem manifests itself in two ways
              in an introductory course: when students first
              encounter multiple instances of objects of the same
              class within a program and when they encounter
              recursive functions. This paper presents several
              techniques that can be used throughout a course to
              help students prepare a proper mental map of the
              processes taking place within the computer.}
}

@Article{ChangLinSungChen:2000,
  author    = {Kuo-En Chang and Pin-Chieh Lin and Yao-Ting Sung and
               Sei-Wang Chen},
  title     = {{S}ocratic\hyp{}dialectic learning system of recursion
               programming},
  journal   = {Journal of Educational Computing Research},
  year      = 2000,
  volume    = 23,
  number    = 2,
  pages     = {133--150},
  note      = {{ISSN} 0735-6331},
  abstract  = {The purpose of this research was to construct a
               recursion programming learning system based on
               Socratic dialogue. Since recursion programming
               learning relates to the formation and evolution of
               mental models, the learning may not be effective if
               teachers rely only on simply telling the students
               the standard solutions. Instead, teachers should
               urge the students to consider the mistakes and
               contradictions discovered by themselves in the
               learning process. Socratic dialogue is applied as a
               dialectic method, which presents questions to
               students and encourages them to reflect on their own
               thinking. In this study, we explored the fundamental
               Socratic dialogue reasoning principles and
               implemented these principles through production
               rules. This Socratic-dialectic learning system was
               implemented using database techniques and evaluated
               by an empirical study. According to the experimental
               results, the Socratic dialogue was proven to have
               positive impact on recursion programming learning.}
}

@Article{Stojmenovic:2000,
  author  = {Ivan Stojmenovic},
  title   = {Recursive algorithms in computer science courses:
             {F}ibonacci numbers and binomial coefficients},
  journal = {IEEE Transactions on Education},
  year    = 2000,
  volume  = 43,
  number  = 3,
  pages   = {273--276},
  month   = aug,
  note    = {{ISSN} 0018-9359},
  abstract = {We observe that the computational inefficiency of
              branched recursive functions was not appropriately
              covered in almost all textbooks for computer science
              courses in the first three years of the
              curriculum. Fibonacci numbers and binomial
              coefficients were frequently used as examples of
              branched recursive functions. However, their
              exponential time complexity was rarely claimed and
              never completely proved in the
              textbooks. Alternative linear time iterative
              solutions were rarely mentioned. We give very simple
              proofs that these recursive functions have
              exponential time complexity. The proofs are
              appropriate for coverage in the first computer
              science course.}
}

@InProceedings{Velazquez:2000,
  author       = {Jes\'us \'Angel Vel\'azquez-Iturbide},
  title        = {Recursion in gradual steps ({I}s recursion really
                  that difficult?)},
  booktitle    = {Proceedings of the International Technical Symposium
                  on Computer Science Education},
  pages        = {310--314},
  year         = 2000,
  month        = mar,
  address      = {Austin, Texas, USA},
  organization = {ACM SIGCSE},
  publisher    = {ACM Press},
  note         = {{ISBN} 1-58113-213-1},
  abstract     = {We propose a gradual approach to teach
                  recursion. Our main assumption is that the
                  difficulty in learning recursion does not come from
                  the recursion concept itself, but from its
                  interaction with other mechanisms of imperative
                  programming. We use this basic idea to propose a new
                  pedagogical approach. On the one hand, recursion is
                  introduced in a gradual way by means of three fields
                  (grammars, functional programming and imperative
                  programming). On the other hand, each instance of
                  recursion is explained so that all of its
                  accompanying mechanisms are clearly identified. The
                  approach has three main advantages. First, the
                  teaching of recursion is simplified because it is
                  taught in a gradual way. Second, the concept of
                  recursion is isolated and differentiated from other
                  concepts or mechanisms associated to particular
                  instances of recursion. Last, the student perceives
                  recursion as a recurrent concept in the discipline
                  of computer science.}
}

@InProceedings{LevyLapidot:2000,
  author       = {Dalit Levy and Tami Lapidot},
  title        = {Recursively speaking: analyzing students' discourse
                  of recursive phenomena},
  booktitle    = {Proceedings of the International Technical Symposium
                  on Computer Science Education},
  pages        = {315--319},
  year         = 2000,
  month        = mar,
  address      = {Austin, Texas, USA},
  organization = {ACM SIGCSE},
  publisher    = {ACM Press},
  note         = {{ISBN} 1-58113-213-1},
  abstract     = {Recursion is a powerful concept, appearing in
                  almost every introductory course in computer-science
                  (CS). CS educators and educational researchers often
                  refer to difficulties in learning recursion, and
                  suggest methods for teaching recursion. However, the
                  research literature barely addresses the unique ways
                  in which students relate to this interdisciplinary
                  concept and the particular learners' language
                  concerning recursive phenomena. The gap is most
                  apparent when seen through a constructivist lens,
                  where the students' prior knowledge and
                  idiosyncratic conceptions should be referred to and
                  reflected upon in order to serve as a basis for
                  further knowledge construction. This paper reports
                  on a study in which a collaborative classification
                  of several recursive phenomena is used to facilitate
                  the construction of recursion. The students'
                  discourse was analyzed, as a step toward
                  understanding the students' ways of speaking
                  recursively. Preliminary results indicate some basic
                  aspects of recursion in the student discourse,
                  although the students apparently talk a very
                  different language from that of the experts, as used
                  by books and teachers.}
}

@InProceedings{George:2000a,
  author       = {Carlisle Eldwidge George},
  title        = {{EROSI}---{V}isualizing recursion and discovering
                  new errors},
  booktitle    = {Proceedings of the International Technical Symposium
                  on Computer Science Education},
  pages        = {305--309},
  year         = 2000,
  month        = mar,
  volume       = 32,
  address      = {Austin, Texas, USA},
  organisation = {ACM SIGCSE},
  publisher    = {ACM Press},
  note         = {{ISSN} 0097-8418},
  abstract     = {This paper introduces a novel software visualisation
                  aid, the EROSI (Explicit Representer Of Subprogram
                  Invocations) tutor, hypothesised to support the
                  acquisition (by novice programmers) of a mental
                  model to facilitate the comprehension and use of
                  recursion as a problem solving technique. Novices
                  found the EROSI tutor easy to use, interesting and a
                  valuable visualisation aid to forming correct mental
                  models of recursive processes. Studies concluded
                  that although novices many have a correct mental
                  model of recursion, various errors and
                  misconceptions (identified) due to exogenous factors
                  affect their ability to complete recursive tasks.}
}

@InProceedings{George:2000b,
  author    = {Carlisle Eldwidge George},
  title     = {Experiences with novices: the importance of
               graphical representations in supporting mental
               models},
  booktitle = {Proceedings of the Workshop of the Psychology of
               Programming Interest Group},
  pages     = {33--44},
  year      = 2000,
  editor    = {A. F. Blackwell and E. Bilotta},
  address   = {Cosenza, Italy},
  month     = apr,
  abstract  = {Recursion is an important problem solving technique 
               used in programming. It is also a highly unfamiliar
               mental activity and many computing novices have
               difficult understanding recursion and applying
               recursive techniques in problem solving. Research
               studies have concluded that novices and experts
               differ in their mental models of recursion. Novices
               seem to possess various inadequate models of
               recursion especially the iterative or loop
               model. This paper examines whether novices who are
               aided in acquiring an expert’s mental model of
               recursion (the copies model) can effectively use
               this model in evaluating recursive
               algorithms. Results of a study indicated that a
               large percentage of novices who had previously
               demonstrated an understanding of the copies model
               (using explicit diagrammatic traces) failed do so
               when not using diagrammatic traces. In fact, they
               appeared to demonstrate evidence for the incorrect
               iterative or loop model when trying to mentally
               evaluate recursive programs. The results provide
               evidence that mental models are unstable and that
               graphical representations are a very necessary aid
               to retrieval of novices' mental models. This
               suggests that the teaching of recursion may be best
               facilitated by teaching students how to simulate the
               execution of a recursive algorithm using
               diagrammatic traces.}
}

@Book{FelleisenFindlerFlattKrishnamurthi:2001,
  author    = {Matthias Felleisen and Robert Bruce Findler and
               Matthew Flatt and Shriram Krishnamurthi},
  title     = {How to design programs},
  publisher = {The MIT Press},
  year      = 2001,
  month     = feb
}

@InProceedings{DannCooperPausch:2001,
  author       = {Wanda Dann  and Stephen Cooper and Randy Pausch},
  title        = {Using visualization to teach novices recursion},
  booktitle    = {Innovation and Technology in Computer Science
                  Education},
  pages        = {109--112},
  year         = 2001,
  address      = {Canterbury, United Kingdom},
  month        = jun,
  organization = {ACM SIGCSE\hyp{}SIGCUE},
  publisher    = {ACM Press},
  note         = {{ISBN} 1-58113-330-8},
  abstract     = {This paper describes an approach for introducing
                  recursion, as part of a course for novice
                  programmers. The course is designed to make use of a
                  3-D animation world-builder as a visualization tool
                  that allows students to see their own programs in
                  action. One of the pedagogical goals of the course
                  is to enable the student to gain an intuitive sense
                  of and mathematical insight into the recursive
                  process. The software, examples of animation using
                  recursion, and some experiences in using this
                  approach are discussed.}
}

@Article{Ben-Ari:2001,
  author   = {Mordechai Ben-Ari},
  title    = {Constructivism in computer science education},
  journal  = {Journal of Computers in Mathematics and Science 
              Teaching},
  year     = 2001,
  volume   = 20,
  number   = 1,
  pages    = {45--73},
  month    = jan,
  note     = {{ISSN} 0731-9258},
  abstract = {Constructivism is a theory of learning which claims that
              students construct knowledge rather than merely
              receive and store knowledge transmitted by the
              teacher. Constructivism has been extremely
              influential in science and mathematics education,
              but not in computer science education (CSE). This
              paper surveys constructivism in the context of CSE,
              and shows how the theory can supply a theoretical
              basis for debating issues and evaluating proposals.}
}

@InProceedings{LevyLapidotPaz:2001,
  author    = {Dalit Levy and Tami Lapidot and Tamar Paz},
  title     = {`{I}t's just like the whole picture, but smaller':
               expressions of gradualism, self\hyp{}similarity, and
               other pre\hyp{}conceptions while classifying
               recursive phenomena},
  booktitle = {Proceedings of the Workshop of the Psychology of
               Programming Interest Group},
  pages     = {249--262},
  year      = 2001,
  editor    = {G. Kadoda},
  address   = {Bournemouth, United Kingdom},
  month     = apr,
  abstract  = {Recursion is a key concept, appearing in almost every
               introductory course in computer science. Educators
               and researchers often refer to difficulties in
               learning and teaching recursion. However, the
               research literature barely addresses the unique ways
               in which students relate to this interdisciplinary
               concept and the particular learners’language
               concerning recursive phenomena. The gap is most
               apparent when seen through a constructivist lens,
               where the students’prior knowledge and
               idiosyncratic conceptions are referred to and
               reflected upon in order to serve as a basis for
               further knowledge construction. In our study, high
               school students collaboratively classified several
               recursive phenomena and discussed their criteria and
               categories with each other. This paper focuses on a
               part of the study that deals with a variety of
               preconceptions which emerged from analysing the
               students’discourse, and suggests a model for
               organizing these preconceptions. Our findings could
               contribute to the recognition of the role of class
               discourse in the process of constructing the concept
               of recursion in particular, and in learning abstract
               computer science concepts in general.}
}

@Article{Levy:2001,
  author   = {Dalit Levy},
  title    = {Insights and conflicts in discussing recursion: a
              case study},
  journal  = {Computer Science Education},
  year     = 2001,
  volume   = 11,
  number   = 4,
  pages    = {305--322},
  month    = dec,
  abstract = {Recursion is a significant concept, appearing in almost
              every introductory course in Computer Science
              (CS). CS educators and educational researchers often
              refer to difficulties in learning and teaching
              recursion.  However, the research literature barely
              addresses the unique ways in which students relate
              to this interdisciplinary concept and the particular
              learners' language concerning recursive
              phenomena. The gap is most apparent when seen
              through a constructivist lens, where the students'
              prior knowledge and idiosyncratic conceptions should
              be referred to and reflected upon in order to serve
              as a basis for further knowledge construction. This
              paper reports on a study in which a collaborative
              classification of several recursive phenomena are
              used to facilitate the construction of
              recursion. The student discourse was recorded and
              analyzed, and a grounded categorical system was
              formed and examined. Preliminary results indicate
              some basic aspects of recursion in the student
              discourse, although the students apparently talk a
              very different language from that of the
              experts. Some `potentially rich' discourse episodes
              were evident as well, representing conflicts among
              alternative conceptions. Such episodes can serve as
              a springboard for further learning.}
}

@InProceedings{Sooriamurthi:2001,
  author       = {Raja Sooriamurthi},
  title        = {Problems in comprehending recursion and suggested
                  solutions},
  booktitle    = {Proceedings of the Conference on Innovation and
                  Technology in Computer Science Education},
  pages        = {25--28},
  year         = 2001,
  address      = {Canterbury, United Kingdom},
  month        = jun,
  organization = {ACM SIGCSE\hyp{}SIGCUE},
  publisher    = {ACM Press},
  note         = {{ISBN} 1-58113-330-8},
  abstract     = {Recursion is a very powerful and useful problem
                  solving strategy. But, along with pointers and
                  dynamic data structures, many beginning programmers
                  consider recursion to be a difficult concept to
                  master. This paper reports on a study of
                  upper-division undergraduate students on their
                  difficulty in comprehending the ideas behind
                  recursion. Three issues emerged as the points of
                  difficulty for the students: (1) insufficient
                  exposure to declarative thinking in a programming
                  context (2) inadequate appreciation of the concept
                  of functional abstraction (3) lack of a proper
                  methodology to express a recursive solution. The
                  paper concludes with a discussion of our approach to
                  teaching recursion, which addresses these
                  issues. Classroom experience indicates this approach
                  effectively aids students' comprehension of
                  recursion.}
}

@InProceedings{BurnettRenKoCookRothermel:2001,
  author    = {Margaret Burnett and Bing Ren and Andrew Ko and
               Curtis Cook and Gregg Rothermel},
  title     = {Visually testing recursive programs in spreadsheet
               languages},
  booktitle = {Proceedings of the IEEE Symposia on Human\hyp{}centric
               Computing Languages and Environments},
  year      = 2001,
  address   = {Stresa, Italy},
  month     = sep,
  abstract  = {Although there has been recent research into ways to
               design visual programming languages and
               environments, little attention has been given to
               systematic testing in these languages, and what work
               has been done does not address "power" features
               such as recursion. In this paper, we discuss two
               possible ways the "What You See Is What You Test"
               methodology could be extended to accommodate
               recursion. The approaches are presented in terms of
               their testing theoretic aspects and then
               implementation strategies and algorithms. Since the
               goal is to help the people using these languages, we
               also present an empirical study and use its results
               to inform our choice as to which of the two
               approaches to adopt.}
}

@Article{TungChangWongJehng:2001,
  author   = {Sho-Huan Tung and Ching-Tao Chang and Wing-Kwong
              Wong and Jihn-Chang Jehng},
  title    = {Visual representations for recursion},
  journal  = {International Journal of Human\hyp{}Computer Studies},
  year     = 2001,
  volume   = 54,
  number   = 3,
  pages    = {285--300},
  month    = mar,
  note     = {{ISSN} 1071-5819},
  abstract = {Visualcode is a visual notation that uses coloured
              expressions and graphical environments to describe
              the execution of Scheme programs. RainbowScheme is a
              program visualization system which is designed to
              produce visualcode representations of step-by-step
              execution of Scheme programs. This article presents
              a new approach of teaching recursion using
              visualcode and RainbowScheme. Experimental
              evaluation indicates that viewing
              RainbowScheme-produced visual traces and requiring
              students to use visualcode to generate visual
              evaluation steps of recursive programs can enhance
              the learners' ability to evaluate recursive programs
              as well as to solve recursive programming problems.}
}


@InProceedings{MurnaneWarner:2001,
  author    = {John S. Murnane and John W. Warner},
  title     = {An empirical study of junior secondary students'
               expression of algorithms in natural language},
  booktitle = {Proceedings of the Seventh World Conference on
               Computers in Education},
  pages     = {81--85},
  year      = 2001,
  editor    = {A. McDougall and J. Murnane and D. Chambers},
  volume    = 8,
  address   = {Copenhagen, Denmark},
  month     = jul,
  publisher = {Australian Computer Society},
  note      = {{ISSN} 0-909925-86-0},
  abstract  = {The formulation and interpretation of written
               procedures should be of central interest to many
               subject areas in education, especially those
               involving computing. This paper concerns the
               significance of students’ written solutions to
               problems. It will describe an experiment with 12 to
               13 year old (Year 8) students involving the
               description in natural language (English) of the
               construction of simple geometric models from unit
               cubes. Several conclusions can be drawn about the
               students' ability to express the solution to a
               problem requiring general algorithmic
               structures. The findings have implications for what
               can be expected of students at this level as well as
               indicating the need for deliberately teaching the
               use of some algorithmic constructions.}
}

@InProceedings{SternNaish:2002b,
  author       = {Linda Stern and Lee Naish},
  title        = {Visual representations for recursive algorithms},
  booktitle    = {Proceedings of the International Technical Symposium
                  on Computer Science Education},
  pages        = {196--200},
  year         = 2002,
  address      = {Cincinnati, Kentucky, USA},
  month        = feb,
  organization = {ACM SIGCSE},
  publisher    = {ACM Press},
  note         = {{ISBN} 1-58113-473-8},
  abstract     = {We have developed a framework for
                  pedagogically-oriented animations, designed to help
                  students learn new algorithms. Recursive sorting and
                  searching algorithms pose a particular challenge, as
                  it can be difficult to find visual representations
                  that help students develop a mental model of how the
                  recursion proceeds. Relatively complex
                  representations, such as thumbnail sketches or
                  explicitly showing the function stack along with the
                  data structure are appropriate for some algorithms,
                  while simpler representations suffice for others. We
                  have found it useful to classify recursive
                  algorithms according to the way they navigate
                  through a data structure and manipulate data items
                  within it, sometimes with further subdivision
                  according to the kind of recursion. Within each
                  category there are common strategies for visual
                  representation. While there may be no single,
                  general way to represent recursive algorithms,
                  classification is a useful guide to picking an
                  appropriate strategy when animating recursive
                  algorithms.}
}

@InProceedings{HabermanAverbuch:2002,
  author       = {Bruria Haberman and Haim Averbuch},
  title        = {The case of base cases: why are they so difficult to
                  recognize? {S}tudent difficulties with recursion},
  booktitle    = {Proceedings of the Seventh Annual Conference on
                  Innovation and Technology in Computer Science
                  Education},
  pages        = {84--88},
  year         = 2002,
  month        = jun,
  address      = {Aarhus, Denmark},
  organization = {ACM SIGCSE},
  publisher    = {ACM Press},
  note         = {{ISBN} 1-58113-499-1},
  abstract     = {Recursion is a central concept in computer science,
                  yet it is a very difficult concept for beginners to
                  learn. In this paper we focus on a specific aspect
                  of comprehending recursion - the conception of the
                  base case as an integral component of a recursive
                  algorithm. We found that students have difficulties
                  in identifying base cases: they handle redundant
                  base cases; ignore boundary values and degenerated
                  cases; avoid out-of-range values; and may even not
                  define any base cases when formulating recursive
                  algorithms. We also found that students have
                  difficulties in evaluating recursive algorithms that
                  deal with imperceptible base cases. We suggest that
                  teachers should make a special effort to discuss
                  different aspects of the base case concept. Emphasis
                  should be put on both declarative and procedural
                  aspects of categorizing and handling base cases as
                  part of recursion formulation.}
}

@Article{SternNaish:2002a,
  author   = {Linda Stern and Lee Naish},
  title    = {Animating recursive algorithms},
  journal  = {Interactive Multimedia Electronic Journal of
              Computer\hyp{}Enhanced Learning},
  year     = 2002,
  volume   = 4,
  number   = 2,
  pages    = {on\hyp{}line},
  note     = {\url{http://imej.wfu.edu/articles/2002/2/02/index.asp}},
  month    = oct,
  abstract = {Designing visual representations for recursive
              algorithms has been addressed within a
              pedagogically-oriented framework for animating
              algorithms. We present a classification for choosing
              the kind of visual representation that is most
              helpful to students. The classification is based on
              the way the algorithm navigates through a data
              structure and manipulates data items within a data
              structure, and suggest strategies for visual
              representation that work within the categories of
              this classification. Further opportunities for
              tailoring representation derive from the shape of
              the data structure and particular forms of
              recursion, such as tail recursion. While there may
              be no single, general way to represent recursive
              algorithms, our classification is a useful guide to
              picking an appropriate strategy for use when
              animating recursive algorithms for teaching
              purposes.}
}

@InProceedings{Schiemenz:2002,
  author       = {Bernd Schiemenz},
  title        = {Managing complexity by recursion},
  booktitle    = {Proceedings of the Symposium on Management and
                  Organizational Change},
  year         = 2002,
  address      = {Vienna, Austria},
  month        = apr,
  organization = {European Meeting on Cybernetics and Systems
                  Research},
  abstract     = {Recursion is a well known concept within computer
                  science and mathematics. In business management it
                  is rarely used explicitly. Counterexamples are
                  applications of dynamic programming and the `Viable
                  System' of Stafford Beer (1972). This paper
                  demonstrates the broad applicability of recursion to
                  managing complexity, especially in business. It
                  starts by showing that recursion is, in contrast to
                  how it may appear in papers of e.g. H.A. Simon
                  (1973), a special case of (intrasystems-)hierarchy. 
                  It shows the two different
                  yet related forms of using recursion: recursive
                  objects and recursive problem solving and gives
                  general examples of both. It then focuses on
                  recursive objects and problem solving in business
                  and finally summarizes the advantages of recursion.}
}

@InProceedings{daRosa:2002,
  author    = {Sylvia da{~}Rosa},
  title     = {The role of discrete mathematics and programming in
               education},
  booktitle = {Proceedings of the Workshop on Functional and
               Declarative Programming in Education},
  year      = 2002,
  address   = {Pittsburgh, Pennsylvania, USA},
  month     = oct,
  publisher = {Technical Report 0210, University of Kiel},
  abstract  = {We have been teaching introductory courses on 
               Functional
               Programming, as part of the curricula of computer
               science university studies, for several years. We
               claim that the origin of most of the difficulties
               in learning Functional Programming doesn't lie in
               computer science courses but in the mathematical
               background of the students. We are convinced that an
               integrated work of mathematics and computer science
               educators will considerably benefit the learning of
               both subjects. Our proposal mainly consists in
               formulating a new approach to teach discrete
               mathematics topics included in High School
               mathematics curricula, relating them with computer
               science concepts. This implies to increase the
               dedication to discrete mathematics in High School
               curricula and to introduce a programming language as
               a formalism to manipulate the mathematical
               objects. We include examples of a course in Discrete
               Mathematics using the programming language ISETL
               that we taught to a group of High School mathematics
               teachers.}
}

@InProceedings{LevyLapidot:2002,
  author       = {Dalit Levy and Tami Lapidot},
  title        = {Shared terminology, private syntax: the case of
                  recursive descriptions},
  booktitle    = {Proceedings of the Seventh Annual Conference on
                  Innovation and Technology in Computer Science
                  Education},
  pages        = {89--93},
  year         = 2002,
  address      = {Aarhus, Denmark},
  month        = jun,
  organization = {ACM SIGCSE},
  publisher    = {ACM Press},
  note         = {{ISBN} 1-58113-499-1},
  abstract     = {This paper reports a study in which 11th grade
                  students were observed, while engaged in several
                  learning activities that address general aspects of
                  recursion. One of these learning activities focused
                  on the creation of recursive descriptions using
                  natural language. The class discourse was recorded
                  and analyzed, in order to locate patterns of
                  students' expressions and ways of thinking. The
                  present finding is two-fold. On the one hand, a
                  class genre was created and used to refer to
                  recursive phenomena and to describe them
                  verbally. On the other hand, although they used a
                  shared set of some agreed-upon terms, the students
                  tended to individually construct their unique
                  recursive descriptions. These individual methods of
                  assembly are labeled hereafter as "private
                  syntax". It is concluded that learners' and
                  educators' awareness of both the "building blocks"
                  of any recursive description and the several
                  possibilities for assembling these blocks, might
                  help in the process of understanding recursion in
                  general and in further construction of recursive
                  functions in particular.}
}

@TechReport{Gotschi:2003,
  author      = {Tina G\"otschi},
  title       = {Mental models of recursion},
  institution = {Faculty of Science, University of the Witwatersand},
  year        = 2003,
  address     = {Johannesburg, South Africa}
}

@InProceedings{GotschiSandersGalpin:2003,
  author       = {Tina G\"otschi and Ian Sanders and Vashti Galpin},
  title        = {Mental models of recursion},
  booktitle    = {Proceedings of the Internationl Technical Symposium
                  on Computer Science Education},
  pages        = {346--350},
  year         = 2003,
  month        = feb,
  address      = {Reno, Nevada, USA},
  organization = {ACM SIGCSE},
  publisher    = {ACM Press},
  note         = {{ISBN} 1-58113-648-X},
  abstract     = {Recursion is a fundamental concept in Computer
                  Science. A student's knowledge of recursion can be
                  termed their mental model of recursion. A student's
                  mental model is viable if it allows them to
                  accurately and consistently represent the mechanics
                  of recursion. Non-viable mental models are
                  constructed if students have misconceptions about
                  the mechanisms of recursion or have misconceptions
                  about concepts fundamental to recursion. This paper
                  presents a study of the mental models of recursion
                  that first year students at the University of the
                  Witwatersrand have constructed in 2000, 2001 and
                  2002. It was found that while the majority of
                  students constructed the viable copies model, many
                  non-viable models such as the looping, active, step,
                  magic, return-value and various odd models were also
                  constructed. Identifying the models that students
                  have can allow lecturers to target individual
                  students' specific problems and analysis of the
                  models can provide insight into learning.}
}

@Article{Bloch:2003,
  author   = {Stephen Bloch},
  title    = {Teaching linked lists and recursion without
              conditionals or null},
  journal  = {Journal of Computing Sciences in Colleges},
  year     = 2003,
  volume   = 18,
  number   = 5,
  pages    = {96--108},
  month    = may,
  note     = {{ISSN} 1937-4771},
  abstract = {We describe a natural and principled approach to
              teaching linked data structures and recursion in
              CS0, CS1 or CS2, and compare the difficulty of using
              this approach in C++, Java, and Scheme.}
}

@Article{Kim:2003,
  author   = {Min Kyeong Kim},
  title    = {Recursive thinking and solving methods},
  journal  = {Journal of the Korea Society of Mathematical Education, 
              series D (Research in Mathematical Education)},
  year     = 2003,
  volume   = 7,
  number   = 4,
  pages    = {211--222},
  month    = dec,
  abstract = {Recursive thinking is iterative, self-referential, and 
              building on itself continuously. Moreover, it is 
              becoming a more prominent feature of the mathematical 
              scope because of the availability of computers and 
              languages like Logo, Excel, and Pascal that support 
              recursion. This study investigates the way to create 
              students' recursive thinking in mathematics classroom 
              and to use various methods to solve problems using a 
              spreadsheet, the Excel program where technology could 
              be accessible.}
}

@Article{FelleisenFindlerFlattKrishnamurthi:2004,
  author  = {Matthias Felleisen and Robert Bruce Findler and
             Matthew Flatt and Shriram Krishnamurthi},
  title   = {{The Structure and Interpretation of the Computer
              Science Curriculum}},
  journal = {Journal of Functional Programming},
  year    = 2004,
  volume  = 14,
  number  = 4,
  pages   = {365--378},
  month   = jul
}

@Book{ZDM:A,
  editor    = {G. Kaiser},
  title     = {ZDM The International Journal on Mathematics 
               Education},
  publisher = {Springer},
  year      = 2004,
  volume    = {36(2)},
  series    = {Proof and Discrete Mathematics: Part~A}
}

@Book{ZDM:B,
  editor    = {G. Kaiser},
  title     = {ZDM The International Journal on Mathematics 
               Education},
  publisher = {Springer},
  year      = 2004,
  volume    = {36(3)},
  series    = {Proof and Discrete Mathematics: Part~B}
}

@InProceedings{BegelGarciaWolfman:2004,
  author       = {Andrew Begel and Daniel D. Garcia and Steven
                  A. Wolfman},
  title        = {Kinesthetic learning in the classroom},
  booktitle    = {Proceedings of the Thirty\hyp{}fifth International
                  Technical Symposium on Computer Science Education},
  pages        = {183--184},
  year         = 2004,
  address      = {Norfolk, Virginia, USA},
  month        = mar,
  organization = {ACM SIGCSE},
  publisher    = {ACM Press},
  note         = {{ISBN} 1-58113-798-2},
  abstract     = {We propose a special session focusing on kinesthetic
                  learning activities, i.e., physically engaging
                  classroom exercises. These might, for example,
                  involve throwing a frisbee around the classroom to
                  represent transfer of control in a procedure call,
                  or simulating polygon scan conversion with rope for
                  edges and students for pixels.  The session will
                  begin with a brief kinesthetic learning activity to
                  motivate the value of these activities. We will
                  follow with a variety of examples, and discuss how
                  to deploy these in a classroom. In the middle of the
                  session, the audience will divide into facilitated
                  groups to design their own activities. Finally, we
                  will all mingle to share and discuss the results. We
                  will set up a public web forum for continued
                  discussion and generation of new ideas.}
}

@Article{Sher:2004,
  author  = {David B. Sher},
  title   = {Recursive objects: {A}n object oriented presentation
             of recursion},
  journal = {Mathematics and Computer Education},
  year    = 2004,
  note    = {Winter issue}
}

@Article{McKavanagh:2004,
  author  = {Charles William McKavanagh},
  title   = {Recursion in everyday problem\hyp{}solving},
  journal = {Australian Vocational Education Review},
  year    = 2004,
  volume  = 11,
  number  = 1,
  pages   = {35--50},
  note    = {Centre for Learning Research, Faculty of Education,
             Griffith University, Queensland, Australia, {ISSN} 1321-3954}
}

@InProceedings{PazLapidot:2004,
  author       = {Tamar Paz and Tami Lapidot},
  title        = {Emergence of automated assignment conceptions in a
                  functional programming course},
  booktitle    = {Proceedings of the Conference on Innovation and
                  Technology in Computer Science Education},
  pages        = {181--185},
  year         = 2004,
  month        = jun,
  address      = {Leeds, United Kingdom},
  organization = {ACM SIGCSE},
  publisher    = {ACM Press},
  note         = {{ISBN} 1-58113-836-9},
  abstract     = {This paper reports a research into the performance
                  of high school students while they were first
                  exposed to the paradigm of functional
                  programming. The findings have been organized using
                  three categories. In this paper we will concentrate
                  on the "Automated assignment to parameters"
                  conception which was the most widespread conception
                  found in the research. We will describe the
                  conception and will discuss some possible factors
                  that could influence its development.}
}

@Article{Haberman:2004,
  author   = {Bruria Haberman},
  title    = {How learning logic programming affects recursion
              comprehension},
  journal  = {Computer Science Education},
  year     = 2004,
  volume   = 14,
  number   = 1,
  pages    = {37--53},
  abstract = {Recursion is a central concept in computer science, yet
              it is difficult for beginners to comprehend. Israeli
              high-school students learn recursion in the
              framework of a special modular program in computer
              science (Gal-Ezer & Harel, 1999). Some of them are
              introduced to the concept of recursion in two
              different paradigms: the procedural programming
              paradigm and the logic programming (LP)
              paradigm. Here we discuss the implication of first
              learning recursion in LP on the students’
              understanding of the concept. The declarative
              approach for teaching recursion in logic programming
              seems to enhance students’ recursion
              comprehension. We found that students who learned
              recursion in LP before learning it in a procedural
              paradigm differed, in terms of their mental models
              of recursion, from those who were acquainted with
              recursion in procedural programming only. More of
              the LP students possessed an adequate model of
              recursion as a process than did the non-LP
              students. Moreover, the LP students also attained a
              unique conception of recursion as a tool for
              knowledge representation.}
}

@Article{BrandtRichey:2004,
  author   = {Keith Brandt and Margaret Richey},
  title    = {Studying mathematical induction and recursive 
              programming together}, 
  journal  = {Journal of Computing Sciences in Colleges},
  year     = 2004,
  volume   = 19,
  number   = 4,
  pages    = {108--114},
  month    = apr,
  note     = {{ISSN} 1937-4771},
  abstract = {Mathematical induction is a proof technique used
              throughout mathematics, and recursion is a
              programming concept frequently used in computer
              science. This note will explore the parallel between
              induction proofs and recursive programs by providing
              several example problems that lead to an induction
              proof and a corresponding recursive program. We feel
              that students who are exposed to this parallel will
              gain a deeper understanding of both topics.}
}

@InProceedings{Yang:2004,
  author    = {Feng-Jen Yang},
  title     = {The domino effect and linear recursion},
  booktitle = {Proceedings of the International Conference on 
               Modeling, Simulation, and Visualization Methods},
  pages     = {201--206},
  year      = 2004,
  address   = {Las Vegas, Nevada, USA}
}

@InProceedings{Ginat:2004,
  author       = {David Ginat},
  title        = {Do senior {CS} students capitalize on recursion?},
  booktitle    = {Proceedings of the Ninth Annual Conference on
                  Innovation and Technology in Computer Science
                  Education},
  pages        = {82--86},
  year         = 2004,
  month        = jun,
  organization = {ACM SIGCSE\hyp{}SIGCUE},
  publisher    = {ACM Press},
  address      = {Leeds, United Kingdom},
  note         = {{ISBN} 1-58113-836-9},
  abstract     = {CS students learn and practice recursion in CS1,
                  data structures, introduction to algorithms, and
                  additional courses throughout the curriculum. 
                  Previous studies revealed difficulties of CS1 
                  students with the concept and the construct of 
                  recursion. What about advanced students? They may
                  well understand the concept and the construct of
                  recursion; but do they invoke and utilize recursion
                  as a problem solving means? The paper examines this
                  aspect, with senior CS students. The students were
                  given three algorithmic tasks, for which the
                  suitable solution approach was recursive. The
                  student solutions and explanations demonstrate very
                  limited capitalization on recursion as a problem
                  solving means. We discuss the findings and suggest
                  pedagogical implications for teaching.}
}

@Article{Manolopoulos:2005,
  author   = {Yannis Manolopoulos},
  title    = {On the number of recursive calls of recursive 
              functions},
  journal  = {The SIGCSE Bulletin},
  year     = 2005,
  volume   = 37,
  number   = 2,
  pages    = {61--64},
  month    = jun,
  abstract = {The advantages and disadvantages of recursion are early
              introduced to students. Simplicity in coding but
              time and space inefficiency during execution are the
              main characteristics. In many occasions, recursive
              formulae lead to recursive functions/procedures that
              are highly inefficient as calls with the same
              parameters are executed several times. Here, we
              elaborate on a previous report [2], where a
              generalized analysis is carried out to derive the
              number of recursive calls of a recursive formula,
              the calculation of the Fibonacci numbers in
              particular. Here we re-examine the problem using a
              different and simpler approach, which generalizes as
              well.}
}

@Misc{Stockmeyer:2005,
  author       = {Paul K. Stockmeyer},
  title        = {The tower of {H}anoi: a bibliography},
  howpublished = {\url{http://www.cs.wm.edu/~pkstoc/biblio2.pdf}},
  year         = 2005
}

@InProceedings{Rosenthal:2005,
  author       = {Tammy Rosenthal},
  title        = {Introducing recursion by using multimedia},
  booktitle    = {Proceedings of the Tenth Annual Conference on
                  Innovation and Technology in Computer Science
                  Education},
  pages        = {374--374},
  year         = 2005,
  month        = jun,
  address      = {Caparica, Portugal},
  organization = {ACM SIGCSE},
  publisher    = {ACM Press},
  note         = {{ISBN} 1-59593-024-8}
}

@Article{Ginat:2005,
  author   = {David Ginat},
  title    = {The suitable way is backwards, but they work forward},
  journal  = {Journal of Computers in Mathematics and Science 
              Teaching},
  year     = 2005,
  volume   = 24,
  number   = 1,
  pages    = {73--88},
  month    = jan,
  note     = {{ISSN} 0731-9258},
  abstract = {Sometimes, if you do not begin at the end, you end at
              the beginning. This problem-solving phenomenon, in
              the realm of computer science (CS), is the subject
              of this paper. Beginning at the end yields a
              "working backwards" approach, opposite to that of
              "working forwards." One might expect 3rd year CS
              students to be aware of and effectively utilize both
              approaches. In particular, one might expect that
              students would work recursively backwards when it is
              the suitable way for solving a given algorithmic
              problem. The study in this paper reveals that this
              is not quite the case. The study shows that a large
              number of students work solely forwards and obtain
              erroneous or inefficient results, without
              considering any redirection of their train of
              thought. These students' working patterns are
              characterized and discussed. Suggestions for
              enabling their awareness and changing the direction
              of their reasoning are shown and advocated.}
}

@InProceedings{BruceDanylukMurtagh:2005,
  author       = {Kim B. Bruce and Andrea Danyluk and Thomas Murtagh},
  title        = {Why structural recursion should be taught before
                  arrays in {CS1}},
  booktitle    = {Proceedings of the International Technical Symposium
                  on Computer Science Education},
  pages        = {246--250},
  year         = 2005,
  month        = feb,
  address      = {St. Louis, Missouri, USA},
  organization = {ACM SIGCSE},
  publisher    = {ACM Press},
  note         = {{ISBN} 1-58113-997-7},
  abstract     = {The approach to teaching recursion in introductory
                  programming courses has changed little during the
                  transition from procedural to object-oriented
                  languages. It is still common to present recursion
                  late in the course and to focus on traditional,
                  procedural examples such as calculating factorials
                  or solving the Towers of Hanoi puzzle. In this
                  paper, we propose that the shift to object-oriented
                  programming techniques calls for a significant shift
                  in our approach to teaching recursion. First, we
                  argue that in the context of object-oriented
                  programming students should be introduced to
                  examples of simple recursive structures such as
                  linked lists and methods that process them, before
                  being introduced to traditional procedural
                  examples. Second, we believe that this material
                  should be presented before students are introduced
                  to structures such as arrays. In our experience, the
                  early presentation of recursive structures provides
                  the opportunity to reinforce the fundamentals of
                  defining and using classes and better prepares
                  students to appreciate the reasons to use classes to
                  encapsulate access to other data structures when
                  they are presented.}
}

@Misc{Ammari:2005,
  author       = {Mojtaba Ammari-Allahyari},
  title        = {Exploring students' understanding of the
                  relationship between iteration and recursion},
  howpublished = {Institute of Education, University of Warwick,
                  United Kingdom},
  year         = 2005,
  abstract     = {In this study, I examine students' appreciation of
                  the relationship between recursion and iteration,
                  including how they perceive the intra-relationship
                  of the components within those processes. My
                  approach is to design a {LOGO}-based microworld, 
                  which acts as a window on the students' thinking. 
                  In this environment, the students model trees and
                  fractal-shaped objects. I use a design-based
                  research methodology in order to gain insights into
                  students' understanding and design issues of the
                  software. These early results show that having a
                  clear understanding of the relation between
                  recursion and iteration and of the flow of control
                  are important in understanding the recursion
                  itself. In addition, functional abstraction is a key
                  concept in dealing with recursion. In the light of
                  these results, I am planning to open up the software
                  such that students will be able to engage with
                  recursion at two levels, namely "functionality"
                  and "functionnings".}
}

@PhdThesis{daRosa:2005,
  author  = {Sylvia da{~}Rosa},
  title   = {The learning of recursive algorithms and their functional
             formalization},
  school  = {Instituto de Computaci\'on, Facultad de Ingenier\'{\i}a,
             Universidad de la Rep\'ublica},
  year    = 2005,
  address = {Montevideo, Uruguay},
  month   = dec
}

@Book{Roberts:2006,
  author    = {Eric S. Roberts},
  title     = {Thinking recursively with Java},
  publisher = {John Wiley \& Sons},
  year      = 2006,
  note      = {{ISSN} 0-471-70146-7}
}

@InProceedings{SandersGalpinGotschi:2006,
  author       = {Ian Sanders and Vashti Galpin and Tina G\"otschi},
  title        = {Mental models of recursion revisited},
  booktitle    = {Proceedings of the Eleventh Annual Conference on
                  Innovation and Technology in Computer Science
                  Education},
  pages        = {138--142},
  year         = 2006,
  month        = jun,
  address      = {Bologna, Italy},
  organization = {ACM SIGCSE},
  publisher    = {ACM Press},
  note         = {{ISBN} 1-59593-055-8},
  abstract     = {Students struggle to understand recursion and we
                  need to find good ways to teach the concept. We
                  believe that an understanding of the mental models
                  of recursion that students develop will assist us in
                  teaching them more effectively. In 2003 we reported
                  on a study of the mental models our students
                  developed. This paper discusses some changes that we
                  made to our teaching in 2003 after that study. An
                  analysis of the students' mental models in 2003,
                  2004 and 2005 shows that more students are
                  developing the copies model of recursion which is
                  always a viable model.}
}

@InProceedings{Polycarpou:2006,
  author    = {Irene Polycarpou},
  title     = {Computer science students' difficulties with
               proofs by induction: an exploratory study},
  booktitle = {Proceedings of the Southeast Regional Conference},
  pages     = {601--606},
  year      = 2006,
  month     = mar,
  address   = {Melbourne, Florida, USA},
  publisher = {ACM},
  note      = {{ISBN} 1-59593-315-8},
  abstract  = {Induction is an important concept for computer science
               and yet students have difficulties understanding it. 
               The current literature on students' difficulties with
               induction is concerned with difficulties students have
               while proving a statement by induction. My research 
               focuses on identifying difficulties that students may 
               have prior to proving a statement. In particular, the 
               present paper is concerned with students' understanding
               of the recursive/inductive definition of the elements 
               the statement is about. My study is contextualized 
               within the undergraduate computer science curriculum, 
               and its results show that students' performance with 
               proofs by induction improves after class instruction, 
               but not as it would be desirable. Moreover, they 
               suggest that students who understand 
               recursive/inductive definitions can successfully 
               perform a proof by induction, while
               students who do not are either not able to perform
               proofs by induction, or if they are, they do so
               mechanically. In addition, students' performance is
               affected by their past knowledge and experience, as
               well as the context in which a problem is presented.}
}

@InProceedings{GinatArmoni:2006,
  author       = {David Ginat and Michal Armoni},
  title        = {Reversing: an essential heuristic in program and 
                  proof design},
  booktitle    = {Proceedings of the International Technical 
                  Symposium on Computer Science Education},
  pages        = {469--473},
  year         = 2006,
  month        = mar,
  address      = {Houston, Texas, USA},
  organization = {ACM SIGCSE},
  publisher    = {ACM Press},
  note         = {{ISBN} 1-59593-259-3},
  abstract     = {Program and proof designs are fundamental in
                  computer science (CS). The designs involve the
                  employment of various heuristics that may be
                  considered rather inherent and natural, such as
                  decomposition. Yet, not all heuristics are
                  natural. One less natural, and rather unintuitive
                  heuristic is that of reversing, in which a task is
                  approached by reasoning backwards or viewing
                  entities through "inverse lenses." One primary form
                  of this heuristic is recursion. But, there are
                  additional forms throughout the CS curriculum that
                  are essential yet not underlined. In this paper we
                  display these forms, underline their important role,
                  and illustrate them in five core courses. In
                  addition, we describe our experience with student
                  difficulties due to unawareness and lack of
                  competence with this heuristic, and offer
                  preliminary guidelines for elaborating it during CS
                  studies.}
}

@Article{Gordon:2006,
  author   = {Aaron Gordon},
  title    = {Teaching recursion using recursively\hyp{}generated
              geometric designs},
  journal  = {Journal of Computing Sciences in Colleges},
  year     = 2006,
  volume   = 22,
  number   = 1,
  pages    = {124--130},
  month    = oct,
  note     = {{ISSN} 1937-4771},
  abstract = {Teaching about recursion usually involves programs
              arriving at answers and displaying the results (for
              example: quicksort, summing elements in a linked
              list, evaluation of an expression tree). This paper
              discusses problems that naturally display results at
              each recursive step. Examples of these programs
              include those that visually display fractals and
              other geometric shapes recursively.}
}

@InProceedings{RubioPajak:2006,
  author    = {Manuel Rubio-S{\'a}nchez and Bo{\.z}ena Paj\k{a}k},
  title     = {Fibonacci numbers using mutual recursion},
  booktitle = {Proceedings of the Fifth Annual Finnish/Baltic Sea
               Conference on Computer Science Education
               (a.k.a. Koli Calling)},
  pages     = {174--177},
  year      = 2006,
  editor    = {T. Salakoski and M{\"a}ntyl{\"a} and L. Mikko},
  volume    = 41,
  address   = {Finland},
  month     = nov,
  publisher = {TUCS General Publications},
  note      = {{ISBN} 951-29-3006-4}
}

@Article{ParejaUrquizaVelazquez:2007,
  author  = {Crist\'obal Pareja-Flores and Jaime Urquiza-Fuentes and
             Manuel Rubio-S\'anchez},
  title   = {{WinHIP}: {A}n {IDE} for functional programming based on 
             rewriting and visualization},
  journal = {ACM SIGPLAN Notices},
  year    = 2007,
  volume  = 42,
  number  = 3,
  pages   = {14--23},
  month   = mar
}

@Article{Foltynowicz:2007,
  author  = {Izabella Foltynowicz},
  title   = {Recursion versus iteration with the list as a data
             structure},
  journal  = {Informatics in Education},
  year     = 2007,
  volume   = 6,
  number   = 2,
  pages    = {283--306},
  abstract = {A reversible sequence of steps from the specification of
              the algorithm and the mathematical definition of the
              recurrent solution through the recursive procedure,
              the tail recursive procedure and finally to the
              iteration procedure, is shown. The notation for
              analysing recursive function execution as well as
              modified flow charts of an algorithm to identify the
              differences between the iteration and the tail
              recursion are proposed. All the procedures are
              written in LOGO, so the lists are used as the data
              structure. Transformation from the recursive
              procedure to the iterative procedure and vice versa
              can be shown in such a way in every language in
              which the recursion is allowed. All examples are one
              recursion-call examples and all except one are the
              functions of discrete mathematics.}
}

@InProceedings{RossiouPapadakis:2007,
  author       = {Eleni Rossiou and Spyros Papadakis},
  title        = {Educational games in higher education: a case study
                  in teaching recursive algorithms},
  booktitle    = {Proceedings of the Fourth International Conference
                  on Education in a Changing Environment},
  pages        = {149--157},
  year         = 2007,
  editor       = {Eamin O'Doherty},
  address      = {Salford, United Kingdom},
  month        = sep,
  organization = {University of Salford},
  publisher    = {Informing Science Press},
  note         = {{ISBN} 1-932886-13-3},
  abstract     = {In this paper we investigate the worthiness of
                  on-line educational games during synchronous virtual
                  classrooms in Higher Education. An educational game
                  was embedded in one of a series of synchronous
                  Tutoring Tele-Meetings (TTMs) for complementing
                  face-to-face classroom instruction in conventional
                  higher education with methods and tools of Open and
                  Distance Education. Virtual classrooms and
                  educational games provided synchronous
                  tele-educational service complementary to f2f
                  lecturing during the course “Algorithms with C”
                  which is a compulsory (first semester) course of
                  Department of Applied Informatics at the University
                  of Macedonia, Greece. Virtual Classrooms were
                  implemented on CENTRA Symposium platform, through
                  the server of the Hellenic Open
                  University. Educational games were created on the
                  Online Educational Games Central (EGC) of TELUQ
                  University of Quebec, Canada. Thirty three (33)
                  undergraduates of first semester “played” the
                  web-based educational game “Recursive Algorithms”,
                  were created based on “Snakes and Ladders” shell. We
                  investigated the easy use of the EGC platform, the
                  students’ motivation and their perceptions and
                  attitudes after their experience in blended learning
                  using educational game. Finally, we became conscious
                  of the changes in tutor’s role as advisory
                  instructor in a virtual classroom. Regarding the
                  motivational aspects, the first results have been
                  encouraging. Students' effort to win increased their
                  interest for the course and helped them realise
                  misunderstandings and misconceptions on algorithms
                  concepts. Powerful clues revealed that incorporation
                  of games in educational process triggers students
                  learning competitively and enhances their learning
                  cooperatively in a pleasant learning
                  environment. Furthermore, both from students' and
                  teachers' points of view, positive perceptions
                  regarding the effective use of computer games with
                  educational features in education have been raised.}
}

@Article{ZmudaHatch:2007,
  author   = {Michael Zmuda and Melanie Hatch},
  title    = {Scheduling topics for improved student comprehension
              of recursion},
  journal  = {Computers \& Education},
  year     = 2007,
  volume   = 48,
  number   = 2,
  pages    = {318--328},
  month    = feb,
  note     = {Elsevier Science, {ISSN} 0360-1315},
  abstract = {This paper presents the results of an experiment
              conducted to assess the affects of teaching
              recursion in two disjoint, non-consecutive units of
              instruction. One group of students was taught basic
              and advanced recursion topics in four consecutive
              class periods, while a second group was taught
              recursion in two two-period blocks that were
              separated by several class periods. It was unknown
              whether the time period separating the presentation
              of basic and advanced material would benefit, or
              hinder, student comprehension. Statistical analysis
              of empirical data indicates that students learning
              basic and advanced recursion in a consecutive unit
              of instruction spend less time solving their
              problems than the students learning the topic in two
              separated units, while achieving comparable scores.}
}

@InProceedings{SandersGalpin:2007,
  author       = {Ian Douglas Sanders and Vashti C. Galpin},
  title        = {Students' mental models of recursion at {W}its},
  booktitle    = {Proceedings of the Twelfth Annual Conference on
                  Innovation and Technology in Computer Science
                  Education},
  pages        = {317--317},
  year         = 2007,
  month        = jun,
  address      = {Dundee, Scotland, United Kingdom},
  organization = {ACM SIGCSE},
  publisher    = {ACM Press},
  note         = {{ISBN} 978-1-59593-610-3},
  abstract     = {Recursion is a concept which all computer scientists
                  should understand and be able to use but novices
                  find it difficult to master. In the School of
                  Computer Science at the University of the
                  Witwatersrand (Wits) we have for a long time been
                  concerned about how we can assist our students with
                  recursion. One thrust of our research is the study
                  of the mental models of recursion (c.f. Kahney)
                  which our first year students develop.}
}

@InProceedings{daRosa:2007,
  author    = {Sylvia da{~}Rosa},
  title     = {The learning of recursive algorithms from a
               psychogenetic perspective},
  booktitle = {Proceedings of the Workshop of the Psychology of
               Programming Interest Group},
  year      = 2007,
  address   = {Joensuu, Finland},
  month     = jul,
  abstract  = {The ideas presented in this paper concern computer
               science education research within Jean Piaget's
               theory genetic epistemology. Results from Piaget
               and collaborators investigations about the recursive
               reasoning on the series of natural numbers are
               extended to learn about entering students recursive
               reasoning on other inductively defined structures. In
               this paper the main aspects of that extension are
               described using a selected example.} 
}

@InProceedings{GoldwasserLetscher:2007,
  author       = {Michael Goldwasser and David Letscher},
  title        = {Teaching strategies for reinforcing structural
                  recursion with lists},
  booktitle    = {Proceedings of the Conference on Object Oriented
                  Programming, Systems, Languages and Applications},
  pages        = {889--896},
  year         = 2007,
  month        = oct,
  address      = {Montr\'eal, Qu\'ebec, Canada},
  organization = {ACM SIGPLAN},
  publisher    = {ACM Press},
  note         = {{ISBN} 978-1-59593-865-7},
  abstract     = {Recursion is an important concept in computer
                  science and one that possesses beauty and
                  simplicity, yet many educators describe challenges
                  in teaching the topic. Kim Bruce champions the early
                  use of structural recursion in an object-oriented
                  introductory programming course as a more intuitive
                  concept than traditional (functional) recursion. He
                  uses many graphical examples for motivation (e.g.,
                  nested boxes, a ringed bullseye, fractals),
                  providing concreteness to the recursive
                  concept. Internally, most of those examples are
                  disguised forms of a basic recursive list
                  pattern. Recursive lists are important in and of
                  themselves and a mainstay within the functional
                  programming paradigm. However, further challenges
                  exist in providing a tangible presentation for pure
                  lists when disassociated from a graphical
                  structure.}
}

@Article{Edgington:2007,
  author   = {Jeffrey Edgington},
  title    = {Teaching and viewing recursion as delegation},
  journal  = {Journal of Computing Sciences in Colleges},
  year     = 2007,
  volume   = 23,
  number   = 1,
  pages    = {241--246},
  month    = oct,
  note     = {{ISSN} 1937-4771},
  abstract = {We present an effective way to teach recursion which we
              believe nearly anyone can understand. Most people are 
              familiar with the concept of someone delegating a task
              to another person. Our method is based on this idea and 
              presents recursion as a particular form of task
              delegation. This simple form of delegation is similar 
              to the Little People metaphor. We then extend this form 
              to a more general description of task delegation. We
              believe that this extension improves understanding of
              how to program recursive procedures (especially by 
              end-users and novice programmers). Finally we discuss 
              the initial design of a recursion visualization based 
              on task delegation for the Greenfoot programming
              environment.}
}

@InBook{FernandezPerezVelazquezUrquiza:2007,
  author    = {Luis Fern\'andez-Mu{\~n}oz and Antonio
               P\'erez-Carrasco and Jes\'us \'Angel 
               Vel\'azquez-Iturbide and Jaime Urquiza-Fuentes},
  title     = {Creating new learning experiences on a global scale},
  chapter   = {A framework for the automatic generation of
               algorithm animations based on design techniques},
  publisher = {Springer},
  year      = 2007,
  volume    = 4753,
  series    = {LNCS 4753},
  pages     = {475--480},
  note      = {{ISBN} 978-3-540-75194-6},
  abstract  = {A novel approach to algorithm animation consists in
               displaying algorithms based on their design
               technique. In this paper, we describe a framework to
               generate these animations without effort from the
               instructor. We describe a preprocessing phase that
               modifies the source code of the algorithm to
               visualize. When the transformed code is executed, a
               trace is stored and then used to generate an
               animation. We also describe the architecture of the
               animation subsystem. Finally, we outline the main
               features of SRec, a system that we have built to
               illustrate the feasibility of this approach. It is
               aimed at visualizing multiple views of recursion,
               namely traces, the control stack and activation
               trees.}
}

@InProceedings{RubioHernan:2007,
  author       = {Manuel Rubio-S\'anchez and Isidoro Hern\'an-Losada},
  title        = {Exploring recursion with {F}ibonacci numbers},
  booktitle    = {Proceedings of the Twelfth Annual Conference on
                  Innovation and Technology in Computer Science
                  Education},
  pages        = {359--359},
  year         = 2007,
  address      = {Dundee, Scotland, United Kingdom},
  month        = sep,
  organization = {ACM SIGCSE\hyp{}SIGCUE},
  publisher    = {ACM Press},
  note         = {{ISSN} 0097-8418},
  abstract     = {This paper addresses the relationship between
                  recursion and combinatorial problems, which may
                  benefit teaching recursion in CS1/2 courses. 
                  Problems whose solutions are related to Fibonacci
                  numbers are particularly interesting, since some
                  can be decomposed by using different strategies, 
                  which may be based on the numerous Fibonacci
                  identities or even on the concept of mutual
                  recursion.}
}

@Article{BenanderBenander:2008,
  author   = {Alan C. Benander and Barbara A. Benander},
  title    = {Student monks---{T}eaching recursion in an {IS} or {CS}
              programming course using the {T}owers of {H}anoi},
  journal  = {Journal of Information Systems Education},
  year     = 2008,
  volume   = 19,
  number   = 4,
  pages    = {455--468},
  month    = dec,
  note     = {{ISSN} 1055-3096},
  abstract = {Educators have been using the Towers of Hanoi problem
              for many years as an example of a problem that has a
              very elegant recursive solution. However, the
              elegance and conciseness of this solution can make
              it difficult for students to understand the amount
              of computer time required in the execution of this
              solution. And, like many recursive computer
              programs, students often find it difficult to follow
              a trace of the solution. Research in computer
              education has shown that active learning exercises
              achieve positive educational results. In line with
              this research, an active learning exercise was
              employed in the classroom to assist students in
              gaining a better understanding of the recursive
              solution to the Towers of Hanoi problem. This
              demonstration can be used in an introductory IS or
              CS programming class, independent of the language
              used. The demonstration involves using student
              volunteers, who, in the demonstration, are referred
              to as "monks", a reference to the original problem
              that had monks moving the golden rings in the Towers
              of Hanoi. An anonymous student survey revealed that
              students felt strongly that the demonstration helped
              them better understand recursion, and that the
              demonstration was a good use of class time. In
              addition, an analysis of a small sample of students'
              computer programs following the demonstration,
              suggests that there may be pedagogical benefits to
              use of the student monk demonstration.}
}

@Article{WeiMurray:2008,
  author   = {Xiaoming Wei and Keitha Murray},
  title    = {A detail+context approach to visualize function calls},
  journal  = {Journal of Computing Sciences in Colleges},
  year     = 2008,
  volume   = 23,
  number   = 3,
  pages    = {162--167},
  month    = jan,
  note     = {{ISSN} 1937-4771},
  abstract = {We present our work using a hyperbolic tree structure to
              animate program function calls and use it as an
              alternative method to demonstrating concepts such as
              recursion. Our main goal is to develop a visualization 
              tool to help both lower level and upper level computer 
              science students understand the trace of a function
              call. A detailed visualization of a function call,
              including the assignment of variables, allocation of 
              memory, execution of control statements, etc. can help 
              lower level students understand the underlying data 
              structures and algorithms. At the same time, a global 
              view of the hierarchical call chain can provide greater
              insight for upper level students. We propose the
              utilization of the hyperbolic tree as a tool for
              visualizing larger and more complex Java programs.}
}

@Article{Wirth:2008,
  author   = {Michael Wirth},
  title    = {Introducing recursion by parking cars},
  journal  = {The SIGCSE Bulletin},
  year     = 2008,
  volume   = 40,
  number   = 4,
  pages    = {52--55},
  month    = dec,
  abstract = {Many approaches to teaching recursion in textbooks
              focus on classical examples such as Fibonacci,
              factorial, or the Towers of Hanoi. As established as
              these algorithms are, they don't really illustrate
              the potential of recursion. This paper explores the
              use of a novel recursive algorithm which requires
              innovative thinking, and the use of random numbers.
              The algorithm looks at the use of recursion to
              randomly park cars on a street.}
}

@InProceedings{RubioUrquizaPareja:2008,
  author       = {Manuel Rubio-S\'anchez and Jaime Urquiza-Fuentes and
                  Crist\'obal Pareja-Flores},
  title        = {A gentle introduction to mutual recursion},
  booktitle    = {Proceedings of the Thirteenth Annual Conference on
                  Innovation and Technology in Computer Science
                  Education},
  pages        = {235--239},
  year         = 2008,
  month        = jun,
  address      = {Madrid, Spain},
  organization = {ACM SIGCSE\hyp{}SIGCUE},
  publisher    = {ACM Press},
  note         = {{ISBN} 978-1-60558-078-4},
  abstract     = {Recursion is an important topic in computer science
                  curricula. It is related to the acquisition of
                  competences regarding problem decomposition,
                  functional abstraction and the concept of
                  induction. In comparison with direct recursion,
                  mutual recursion is considered to be more
                  complex. Consequently, it is generally addressed
                  superficially in CS1/2 programming courses and
                  textbooks. We show that, when a problem is
                  approached appropriately, not only can mutual
                  recursion be a powerful tool, but it can also be
                  easy to understand and fun. This paper provides
                  several intuitive and attractive algorithms that
                  rely on mutual recursion, and which have been
                  designed to help strengthen students' ability to
                  decompose problems and apply induction. Furthermore,
                  we show that a solution based on mutual recursion
                  may be easier to design, prove and comprehend than
                  other solutions based on direct recursion. We have
                  evaluated the use of these algorithms while teaching
                  recursion concepts. Results suggest that mutual
                  recursion, in comparison with other types of
                  recursion, is not as hard as it seems when: (1)
                  determining the result of a (mathematical) function
                  call, and, most importantly, (2) designing
                  algorithms for solving simple problems.}
}

@Article{Hsin:2008,
  author   = {Wen-Jung Hsin},
  title    = {Teaching recursion using recursion graphs},
  journal  = {Journal of Computing Sciences in Colleges},
  year     = 2008,
  volume   = 23,
  number   = 4,
  pages    = {217--222},
  month    = apr,
  note     = {{ISSN} 1937-4771},
  abstract = {Teaching recursion to undergraduate students is a
              challenging task. In this paper, a Recursion Graph
              is proposed to help students understand the process
              of recursion. Specifically, it provides a visual aid
              to illustrate the concept of recursion.}
}

@InProceedings{VelazquezPerezUrquiza:2008,
  author       = {Jes\'us \'Angel Vel\'azquez-Iturbide and Antonio
                  P\'erez-Carrasco and Jaime Urquiza-Fuentes},
  title        = {{SRec}: an animation system of recursion for
                  algorithm courses},
  booktitle    = {Proceedings of the Thirteenth Annual Conference on
                  Innovation and Technology in Computer Science
                  Education},
  pages        = {225--229},
  year         = 2008,
  month        = jun,
  address      = {Madrid, Spain},
  organization = {ACM SIGCSE},
  publisher    = {ACM Press},
  note         = {{ISBN} 978-1-60558-078-4},
  abstract     = {In this paper we describe SRec, a system to animate
                  recursion in Java programs. It is intended to assist
                  in algorithm courses to better understand and
                  analyze algorithm behavior. We make several
                  contributions. Firstly, SRec exhibits a
                  comprehensive set of animation and educational
                  features. It provides three complementary,
                  coordinated views of recursion: traces, the
                  execution stack and activation trees. SRec allows
                  the user constructing and modifying animations
                  without effort. The animation can be played
                  flexibly, both forward and backwards. It also
                  provides facilities to integrate animations into
                  courses. Secondly, the paper describes the
                  educational features of the system and its use in
                  algorithm courses. Thirdly, the system has been
                  fully evaluated with respect to usability (using
                  formative and summative methods) and has been
                  compared to other systems reported in the
                  literature. The results of both evaluations are
                  highly positive.}
}

@PhdThesis{Cobbe:2008,
  author  = {Richard C. Cobbe},
  title   = {Much ado about nothing: {P}utting {J}ava's null in its
             place},
  school  = {College of Computer and Information Science},
  year    = 2008,
  address = {Northeastern University, Boston, Massachusetts, USA},
  month   = dec
}

@InProceedings{Hoare:2009,
  author    = {Tony Hoare},
  title     = {Null references: {T}he billion dollar mistake},
  booktitle = {The Annual International Software Development
               Conference},
  year      = 2009,
  address   = {London, England, United Kingdom},
  month     = aug,
  note      = {\url{http://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare}}
}

@InProceedings{VelazquezPerezUrquiza:2009a,
  author       = {Jes\'us \'Angel Vel\'azquez-Iturbide and Antonio
                  P\'erez-Carrasco and Jaime Urquiza-Fuentes},
  title        = {Interactive visualization of recursion with {SRec}},
  booktitle    = {Proceedings of the Fourteenth Annual Conference on
                  Innovation and Technology in Computer Science
                  Education},
  pages        = {339--339},
  year         = 2009,
  month        = jul,
  address      = {Paris, France},
  organization = {ACM SIGCSE},
  publisher    = {ACM Press},
  note         = {{ISBN} 978-1-60558-381-5},
  abstract     = {SRec is an animation system of recursion intended to
                  assist in algorithm courses. We present the main
                  contributions of version 1.1. First, SRec fully
                  supports any kind of recursion. Second, it provides
                  three additional graphical representations for
                  divide-and-conquer algorithms. Finally, it is highly
                  interactive to promote an exploratory style of
                  learning.}
}


@InProceedings{VelazquezPerezUrquiza:2009b,
  author    = {Jes\'us \'Angel Vel\'azquez-Iturbide and Antonio
               P\'erez-Carrasco and Jaime Urquiza-Fuentes},
  title     = {A design of automatic visualizations for
               divide\hyp{}and\hyp{}conquer algorithms},
  booktitle = {Proceedings of the Program Visualization Workshop},
  pages     = {159--167},
  year      = 2009,
  volume    = 224,
  series    = {Electronic Notes in Theoretical Computer Science},
  month     = jan,
  abstract  = {The paper addresses the design of program
               visualizations adequate to represent
               divide-and-conquer algorithms. Firstly, we present
               the results of several surveys performed on the
               visualization of divide-and-conquer algorithms in
               the literature. Secondly, we make a proposal for
               three complementary, coordinated views of these
               algorithms. In summary, they are based an animation
               of the activation tree, an animation of the data
               structure, and a sequence of visualizations of the
               substructures, respectively.}
}

@Article{Yang:2008,
  author   = {Feng-Jen Yang},
  title    = {Another outlook on linear recursion},
  journal  = {The SIGCSE Bulletin},
  year     = 2008,
  volume   = 40,
  number   = 4,
  pages    = {38--41},
  month    = dec,
  note     = {{ISSN} 0097-8418},
  abstract = {Recursion is a well known hurdle for computer science
              beginners. This powerful problem solving technique
              challenges both instructors and students on how to
              convey and learn this skill correctively and
              efficiently. In this paper, I presented an analogy-based
              approach to expound the theoretical detail of linear
              recursion.}
}

@InProceedings{Rubio:2008,
  author       = {Manuel Rubio-S{\'a}nchez},
  title        = {An introduction to problem equivalence with 
                  combinatorics},
  booktitle    = {Proceedings of the Thirteenth Annual Conference on
                  Innovation and Technology in Computer Science
                  Education},
  pages        = {313--313},
  year         = 2008,
  address      = {Madrid, Spain},
  month        = jun,
  organization = {ACM SIGCSE},
  publisher    = {ACM Press},
  note         = {{ISBN} 978-1-60558-078-4},
  abstract     = {This paper proposes the use of several classes of
                  simple combinatorial problems that share the same
                  solution for teaching problem equivalence and
                  recursion. Our focus is on counting problems that
                  involve Fibonacci numbers. While these problems have
                  simple recursive solutions, we propose that---for
                  teaching purposes---they can also be solved by
                  finding other isomorphic problems for which the
                  solution is known.}
}

@InProceedings{GoldbergWiener:2009,
  author    = {Mayer Goldberg and Guy Wiener},
  title     = {Anonymity in {E}rlang},
  booktitle = {Erlang User Conference},
  year      = 2009,
  address   = {Stockholm},
  month     = nov
}

@InProceedings{LobinaGarcia:2009,
  author    = {David J. Lobina and Jos\'e E. Garc\'{\i}a-Albea},
  title     = {Recursion and {C}ognitive {S}cience: {D}ata 
               {S}tructures and {M}echanisms},
  booktitle = {Proceedings of the 31st Annual Conference of the 
               Cognitive Science Society},
  pages     = {1347--1352},
  year      = 2009,
  editor    = {N. A. Taatgen \& H. van Rijn},
  address   = {Austin, Texas, USA},
  abstract  = {The origin and application of Recursion in the formal 
               sciences is described, followed by a critical analysis 
               of the adoption and adaptation of this notion in 
               cognitive science, with a focus on linguistics and 
               psychology. The conclusion argues against a widespread 
               mistake in cognitive science, and recommends recursion 
               should only be used in reference to mechanisms.}
}

@InProceedings{RubioVelazquez:2009,
  author    = {Manuel Rubio-S{\'a}nchez and Jes\'us \'Angel 
               Vel\'azquez-Iturbide},
  title     = {Tail recursion by using function generalization},
  booktitle = {Proceedings of the 14th annual ACM SIGCSE conference
               on Innovation and Technology in Computer Science
               Education},
  pages     = 394,
  year      = 2009,
  month     = jul,
  address   = {Paris, France},
  abstract  = {The design of tail recursive algorithms may require 
               thinking about iteration rather than recursion. This 
               paper provides a methodology for deriving tail 
               recursive functions that is based on declarative 
               programming and the concept of function 
               generalization, which allow to avoid iterative 
               thinking.}
}

@InProceedings{ChaffinDoranHicksBarnes:2009,
  author       = {Amanda Chaffin and Katelyn Doran and Drew Hicks and
                  Tiffany Barnes},
  title        = {Experimental evaluation of teaching recursion in a
                  video game},
  booktitle    = {Proceedings of the Symposium on Video Games},
  pages        = {79--86},
  year         = 2009,
  address      = {New Orleans, Louisiana, USA},
  month        = aug,
  organization = {ACM SIGGRAPH},
  publisher    = {ACM Press},
  note         = {{ISBN} 978-1-60558-514-7},
  abstract     = {We present EleMental: The Recurrence, a novel game
                  that provides computer science students the
                  opportunity to write code and perform interactive
                  visualizations to learn about recursion through
                  depth-first search of a binary tree. We designed the
                  game to facilitate maximum transfer of learning to
                  writing real programs, while also providing for
                  interactive visualizations. We conducted a study
                  with computer science majors to measure the impact
                  of the game on learning and on attitudes toward
                  educational games. Our results demonstrate the
                  enthusiasm students have for learning games and
                  provide insight into how such games should be
                  constructed.}
}

@InProceedings{GunionMilfordStege:2009a,
  author       = {Katherine Gunion and Todd Milford and Ulrike Stege},
  title        = {Curing recursion aversion},
  booktitle    = {Proceedings of the Fourteenth Annual Conference on
                  Innovation and Technology in Computer Science
                  Education},
  pages        = {124--128},
  year         = 2009,
  month        = jul,
  organization = {ACM SIGCSE\hyp{}SIGCUE},
  publisher    = {ACM Press},
  address      = {Paris, France},
  note         = {{ISBN} 978-1-60558-381-5},
  abstract     = {This paper outlines a pilot study which expands the
                  age range of students exposed to computer science
                  through interesting and engaging activities. Through
                  this engagement, the number of students who 
                  understood and recognized the concepts covered 
                  increased. We hypothesize that these activities can
                  increase the number of students who pursue 
                  post-secondary computer science. We present a 
                  unique recursion curriculum that exposes nine 
                  students aged 11–14 through hands-on experience over 
                  a 7-week period at the University of Victoria, 
                  Canada. The curriculum was comprised of progressively
                  challenging "unplugged" activities and included 
                  programming applications with the {LOGO}-based
                  programming language MicroWorlds EX. Curriculum, 
                  classroom experience, preliminary results and next 
                  steps are discussed.}
}


@Article{GunionMilfordStege:2009b,
  author   = {Katherine Gunion and Todd Milford and Ulrike Stege},
  title    = {The paradigm recursion: is it more accessible when
              introduced in middle school?},
  journal  = {Journal of Problem Solving},
  year     = 2009,
  volume   = 2,
  number   = 2,
  pages    = {142--172},
  abstract = {Recursion is a programming paradigm as well as a problem
              solving strategy thought to be very challenging to
              grasp for university students. This article outlines
              a pilot study, which expands the age range of
              students exposed to the concept of recursion in
              computer science through instruction in a series of
              interesting and engaging activities. In this study,
              a small number of students (n = 9) aged 11 to 13
              years, were presented with a new and unique
              recursion curriculum involving hands-on experiences
              over a seven-week period at the University of
              Victoria, Canada. The curriculum was comprised of a
              series of progressively challenging recursion
              activities—roughly based upon the ideas of "Computer
              Science Unplugged" (Bell, Witten, & Fellows,
              2009)—and included programming applications with
              MicroWorlds EX, a programming language based on
              {LOGO}. Through this engagement, an increased number
              of students recognized and understood the concepts
              covered. We hypothesize that through experiences for
              youth with activities such as those outlined here,
              the number of students who understand fundamental
              computer science applications and who might
              potentially pursue computer science in
              post-secondary education will increase. We
              hypothesis further that through an earlier encounter
              of “challenging” concepts the learning and
              understanding of those will become easier at the
              university level. In this paper, the curriculum,
              classroom experiences, preliminary, largely
              descriptive and qualitative results and next steps
              in the research are discussed.}
}

@InProceedings{Stephenson:2009a,
  author       = {Ben Stephenson},
  title        = {Visual examples of recursion},
  booktitle    = {Proceedings of the Conference on Innovation and
                  Technology in Computer Science Education},
  pages        = {400--400},
  year         = 2009,
  address      = {Paris, France},
  month        = jul,
  organization = {ACM SIGCSE},
  publisher    = {ACM Press},
  note         = {{ISBN} 978-1-60558-381-5},
  abstract     = {Because recursion is generally introduced early in
                  the curriculum, the range of problems that can be
                  used to motivate its study is limited. We describe
                  three interesting visual problems that use recursion
                  effectively. Each problem demonstrates the utility
                  of recursion in an engaging way while being
                  appropriate for students nearing the end of CS1.}
}

@Article{Stephenson:2009b,
  author   = {Ben Stephenson},
  title    = {Using graphical examples to motivate the study of
              recursion},
  journal  = {Journal of Computing Sciences in Colleges},
  year     = 2009,
  volume   = 25,
  number   = 1,
  pages    = {42--50},
  month    = oct,
  note     = {{ISSN} 1937-4771},
  abstract = {Recursion is an important part of a complete computer
              science education. It is a topic that is often
              introduced during the first course, and then
              revisited when tree data structures are introduced
              and functional languages are discussed. Because
              recursion is introduced early in the curriculum, the
              range of problems that can be discussed when it is
              first encountered is limited. In particular, because
              students generally haven't been introduced to data
              structures like trees or efficient sorting
              algorithms such as quick sort and merge sort, these
              areas which use recursion to elegantly solve
              important problems can't be used to motivate its
              study.  This paper describes three graphical
              problems which can be used to motivate the study of
              recursion. Each of the examples demonstrates the
              utility of recursion while being appropriate for
              students nearing the end of their first term in a
              computer science course. In particular, these
              examples can be understood and implemented by
              students who have a reasonable understanding of
              loops, function calls, and, for some problems,
              arrays. They do not require any knowledge of object
              oriented design, pointers or complex data
              structures. Furthermore, while iterative solutions
              exist for each of the problems that we describe, the
              iterative solution for each problem is more complex
              than its recursive solution. We believe that this is
              an additional strength of these examples because it
              helps convince students that recursion is a tool
              that will allow them solve some problems more easily.}
}

@InProceedings{Mirolo:2009,
  author       = {Claudio Mirolo},
  title        = {Mental models of recursive computations
                  vs. recursive analysis in the problem domain},
  booktitle    = {Proceedings of the Fourteenth Annual Conference on
                  Innovation and Technology in Computer Science
                  Education},
  pages        = {397--397},
  year         = 2009,
  month        = jul,
  address      = {Paris, France},
  organization = {ACM SIGCSE},
  publisher    = {ACM Press},
  note         = {{ISBN} 978-1-60558-381-5},
  abstract     = {The work outlined here was inspired by Ian Sanders,
                  Vashti Galpin and Tina G\"otschi, who analyze the
                  mental models of recursion by looking at how
                  students trace simple recursive
                  computations. Besides trying to understand if their
                  results generalize to a different context, I was
                  interested to see the correlations between the
                  mental models of the computation process and the
                  ability to establish recursive relationships in the
                  problem domain.  My investigation essentially lends
                  further support to their findings. However, a
                  consistent mental model of recursive computations,
                  although implied by the ability to use recursion in
                  problem-solving, does not seem to be sufficient for
                  the achievement of this higher-level skill.}
}

@MastersThesis{vanOudheusden:2009,
  author  = {Karel Van Oudheusden},
  title   = {{The Advent of Recursion \& Logic in Computer Science}},
  school  = {Institute for Logic, Language and Computation},
  year    = 2009,
  address = {University of Amsterdam, Amsterdam, The Netherlands},
  month   = dec,
  note    = {Author a.k.a. Edgar G. Daylight}
}

@Article{Katai:2009,
  author    = {Zolt\'an K\'atai},
  title     = {Multi\hyp{}sensory method for teaching\hyp{}learning
               recursion},
  journal   = {Computer Applications in Engineering Education},
  year      = 2009,
  publisher = {Wiley Periodicals},
  note      = {Wiley InterScience, {ISSN} 1061-3773},
  abstract  = {In this paper, we are going to introduce a new
               multi-sensory method and software, which improve the
               teaching-learning process of the recursive
               procedures and functions. The presented method can
               also be categorized as a blending or hybrid
               teaching-learning strategy that applies to
               technologically enhanced pedagogy. (The software was
               initially designed to be utilized especially in the
               teaching phase of the educational process, but it
               can also be efficiently used as an e-learning
               tool.)}
}

@InProceedings{ScholtzSanders:2010,
  author       = {Tamarisk Lurlyn Scholtz and Ian Sanders},
  title        = {Mental models of recursion: investigating students'
                  understanding of recursion},
  booktitle    = {Proceedings of the Fifteenth Annual Conference on
                  Innovation and Technology in Computer Science
                  Education},
  pages        = {103--107},
  year         = 2010,
  address      = {Bilkent University, Ankara, Turkey},
  month        = jun,
  organization = {ACM SIGCSE},
  publisher    = {ACM Press},
  note         = {{ISBN} 978-1-60558-729-5},
  abstract     = {Mental models of recursion provide some idea into a 
                  student's understanding of recursion. However there 
                  has been concern regarding whether viable trace 
                  mental models of recursion show students’ true
                  understanding of recursion. We have conducted an
                  investigation to further examine the understanding
                  of recursion of students with viable trace mental
                  models. The investigation looked at students'
                  understanding of the termination of a recursive
                  function, their descriptive mental models and
                  their ability to generate a recursive function. This
                  research provides evidence to show that trace
                  methods are essentially mechanical processes that
                  can allow students with little understanding of
                  recursion to correctly evaluate a recursive function
                  but that students do not fully understand recursion
                  and in particular have difficulties with the passive
                  flow. Based on the results of the study, this paper
                  discusses possible changes that can be made to our
                  teaching in order to more effectively teach
                  recursion to first year students.}
}

@InProceedings{Rubio:2010,
  author       = {Manuel Rubio-S{\'a}nchez},
  title        = {Tail recursive programming by applying 
                  generalization},
  booktitle    = {Proceedings of the Fifteenth Annual Conference on
                  Innovation and Technology in Computer Science
                  Education},
  pages        = {98--102},
  year         = 2010,
  address      = {Bilkent University, Ankara, Turkey},
  month        = jun,
  organization = {ACM SIGCSE},
  publisher    = {ACM Press},
  note         = {{ISBN} 978-1-60558-729-5},
  abstract     = {The design of many tail recursive algorithms can 
                  involve thinking about the status of variables and
                  parameters, and how these change with execution
                  flow. In other words, tail recursion is closely
                  related to iteration and imperative programming.
                  However, it is possible to derive tail
                  recursive functions by exclusively using concepts
                  inherent in recursion, such as declarative
                  programming, induction, or problem decomposition. 
                  This paper proposes a simple
                  methodology for designing tail recursion functions
                  by using a declarative approach and the concept of
                  function generalization. We have carried out an
                  evaluation of the technique with second and
                  third-year computer science students. Results
                  suggest that this new point of view improves
                  students' ability to design tail recursive programs,
                  helps them understand the distinction between the
                  imperative and declarative paradigms, and may
                  reinforce their programming skills in
                  general. Furthermore, students found the
                  methodology easy to learn and apply, simpler than
                  more sophisticated formal methods, and described it
                  as fast and methodic or mechanical, as it involves
                  a sequence of well-defined steps.}
}

@InProceedings{Mirolo:2010,
  author       = {Claudio Mirolo},
  title        = {Learning (through) recursion: a multidimensional
                  analysis of the competences achieved by {CS1}
                  students},
  booktitle    = {Proceedings of the Fifteenth Annual Conference on
                  Innovation and Technology in Computer Science
                  Education},
  pages        = {160--164},
  year         = 2010,
  address      = {Bilkent University, Ankara, Turkey},
  month        = jun,
  organization = {ACM SIGCSE},
  publisher    = {ACM Press},
  note         = {{ISBN} 978-1-60558-729-5},
  abstract     = {In this paper I will discuss an investigation 
                  intended
                  to address the learning of recursion in a
                  multidimensional perspective, where the dimensions
                  correspond to different types of competence relevant
                  to programming. One such dimension is the
                  understanding of the computation model, that I have
                  assessed under the methodology proposed by        
                  G\"otschi et al. (2003). Moreover, I have tried to 
                  analyze and
                  correlate other learning dimensions, such as the
                  ability to establish relations in the problem
                  domain, to deal with recursive structures, as well
                  as to develop basic abstraction skills. One of my
                  objectives is indeed to gain a better understanding
                  of the major sources of difficulties that students
                  face. In essence, my investigation lends further
                  support to previous related findings on mental
                  models. However, a consistent model of recursive
                  computations, although implied by the ability to use
                  recursion in problem-solving, does not seem to be
                  sufficient for the achievement of higher-level
                  skills.}
}

@Article{VelazquezPerez:2010,
  author   = {Jes\'us \'Angel Vel\'azquez-Iturbide 
              and Antonio P\'erez-Carrasco},
  title    = {{InfoVis} interaction techniques in animation of
              recursive programs},
  journal  = {Algorithms},
  year     = 2010,
  volume   = 3,
  number   = 1,
  pages    = {76--91},
  note     = {{ISSN} 1999-4893},
  abstract = {Algorithm animations typically assist in educational
              tasks aimed simply at achieving understanding. 
              Potentially, animations could assist in higher levels 
              of cognition, such as the analysis level, but they 
              usually fail in providing this support because they are 
              not flexible or comprehensive enough. In particular, 
              animations of recursion provided by educational systems 
              hardly support the analysis of recursive algorithms. 
              Here we show how to provide full support to the 
              analysis of recursive algorithms. From a technical 
              point of view, animations are enriched with interaction 
              techniques inspired by the information visualization 
              (InfoVis) field. Interaction tasks are presented in 
              seven categories, and deal with both static 
              visualizations and dynamic animations. All of these 
              features are implemented in the SRec system, and 
              visualizations generated by SRec are used to illustrate 
              the article.}
}

@InProceedings{TasconRinderknechtKimKim:2010,
  author       = {Juan Diego Tasc\'on-Vidarte and Christian
                  Rinderknecht and Jee-In Kim and HyungSeok Kim},
  title        = {A tangible interface for learning recursion and
                  functional programming},
  booktitle    = {IEEE Symposium on Ubiquitous Virtual Reality},
  year         = 2010,
  address      = {Gwangju, Republic of Korea},
  month        = jul,
  organization = {Gwangju Institute of Science and Technology},
  abstract     = {Recursion is a powerful programming
                  technique which is notoriously difficult to master,
                  especially in functional languages because they
                  prominently feature structural recursion as the main
                  control-flow mechanism. We propose several
                  hypotheses to understand the issue and put some to
                  the test by designing an open-source
                  interactive interface based on a tangible
                  block-world with augmented reality and software
                  feedback. Stacks of blocks are used as an analogy
                  for the list data structure, which enables the
                  simplest form of structural recursion. After using
                  this application, students are expected to transfer
                  their training to directly write recursive programs
                  in sequential Erlang, a purely functional
                  language.}
}

@InProceedings{Daylight:2010,
  author    = {Edgar G. Daylight},
  title     = {The advent of recursion in programming (1950s--1960s)},
  booktitle = {Computability in Europe (Programs, Proofs, Processes)},
  year      = 2010,
  address   = {Ponta Delgada, Azores, Portugal},
  month     = jul,
  note      = {Author a.k.a. Karel van Oudheusden},
  abstract  = {The term `recursive' has had different meanings during
               the past two centuries among various communities of
               scholars. Its historical epistemology has already
               been described by Soare (1996) with respect to the
               mathematicians, logicians, and recursive-function
               theorists. The computer practitioners, on the other
               hand, are discussed in this paper by focusing on the
               definition and implementation of the ALGOL60
               programming language. Recursion entered ALGOL60 in
               two novel ways: (i) syntactically with what we now
               call BNF notation, and (ii) dynamically by means of
               the recursive procedure. As is shown, both (i) and
               (ii) were introduced by linguistically-inclined
               programmers who were not versed in logic and who,
               rather unconventionally, abstracted away from the
               down-to-earth practicalities of their computing
               machines. By the end of the 1960s, some computer
               practitioners had become aware of the theoretical
               insignificance of the recursive procedure in terms
               of computability, though without relying on
               recursive-function theory. The presented results
               help us to better understand the technological
               ancestry of modern-day computer science, in the hope
               that contemporary researchers can more easily build
               upon its past.}
}

@InProceedings{Mirolo:2011,
  author    = {Claudio Mirolo},
  title     = {{Is iteration really easier to master than recursion?
               Investigation in a functional\hyp{}first CS1 context}},
  booktitle = {Proceedings of the 16th annual joint onference on
               Innovation and Technology in Computer Science
               Education},
  pages     = 362,
  year      = 2011,
  address   = {Darmstadt, Germany},
  month     = jun,
  abstract  = {Despite a general consensus on the difficulties faced 
               to master recursion, a two-year investigation on the 
               achievements in a functional-first introductory course 
               does not corroborate the hypothesis that students are 
               more at ease with iteration than they are with 
               recursion.}
}

@MastersThesis{Hulsizer:2011,
  author   = {Andrew Hulsizer},
  title    = {Teaching {R}ecursion through {I}nteractive {M}edia},
  school   = {School of Computer Science, College of Engineering},
  year     = 2011,
  address  = {University of Oklahoma, USA},
  month    = jun,
  abstract = {Games are widely used to motivate and aid students 
              in learning. Temple Treasure is a computer based game 
              that allows students to learn a challenging computer 
              science topic (recursion via depth first traversal in 
              binary trees). Temple Treasure is designed to provide 
              both cognitive and affective gains for students. 
              Participants 
              were chosen from a data structures class containing 
              predominantly computer science majors and minors and 
              computer engineering majors where depth first traversal 
              in binary trees was taught. Students in this class had 
              prior exposure to recursive ideas like mathematical 
              induction from a prerequisite course. Participants took 
              a pretest, played Temple Treasure and took a posttest. 
              Both tests measured the participant’s ability to use 
              recursion successfully and their confidence in doing so. 
              The cognitive gain was measured by comparing the 
              posttest and pretest scores. In addition to the 
              cognitive gain, students were asked about their 
              attitudes towards the use of video games in education 
              and the classroom. The results achieved showed both a 
              positive response to the game and a statistically 
              significant increase in test scores. Not surprisingly, 
              the student’s responses showed that the participants like 
              the idea of using games in class as homework or a lab. 
              It is more surprising that students who have already 
              studied recursion through traditional means (lecture, 
              homework, projects) were able to improve their 
              performance from a short exposure to a video game. This 
              shows the potential to use video games to meet high 
              level learning objectives (analysis, evaluation, 
              synthesis)}
}

@Article{Lobina:2011,
  author  = {David J. Lobina},
  title   = {"A {R}unning {B}ack" and {F}orth, {A} {R}eview of 
             \emph{{R}ecursion and {H}uman {L}anguage}},
  journal = {Biolinguistics},
  year    = 2011,
  key     = 5,
  volume  = {1-2},
  pages   = {151--169}
}

@PhdThesis{Lobina:2012,
  author  = {David James {Lobina Bona}},
  title   = {{Recursion in Cognition: A computational
              investigation into the representation and processing
              of language}},
  school  = {University Rovira i Virgili, Department of Psychology},
  year    = 2012,
  address = {Tarragona, Spain},
  month   = feb
}

@InCollection{Reingold:2012,
  author    = {Edward M. Reingold},
  title     = {Four apt elementary examples of recursion},
  booktitle = {Language, culture, computation: {E}ssays dedicated
               to {Y}aacov {C}houeka},
  publisher = {Springer\hyp{}Verlag},
  year      = 2012,
  editor    = {Nachum Dershowitz and Ephraim Nissan},
  series    = {Lecture Notes in Computer Science},
  address   = {Berlin, Germany}
}

@InProceedings{Modeste:2012,
  author    = {Simon Modeste},
  title     = {La pens\'ee algorithmique: {A}pports d'un point de vue 
               ext\'erieur aux math\'ematiques},
  booktitle = {Actes du colloque Espace Math\'ematique Francophone},
  year      = 2012,
  address   = {Geneva, Switzerland},
  month     = feb
}

@Book{Rinderknecht:2012,
  author    = {Christian Rinderknecht},
  title     = {{Design and Analysis of Purely Functional Programs}},
  publisher = {College Publications},
  year      = 2012,
  month     = dec,
  volume    = 15,
  edition   = {second},
  series    = {Texts in Computing},
  address   = {United Kingdom}
}

@InProceedings{TesslerBethLin:2013,
  author    = {Joe Tessler and Bradley Beth and Calvin Lin},
  title     = {{Using Cargo-Bot to Provide Contextualized Learning
                of Recursion}},
  booktitle = {Proceedings of Ninth Annual International ACM
               Conference on International Computing Education
               Research (ICER)},
  pages     = {161--168},
  year      = 2013,
  address   = {San Diego, California, USA},
  month     = aug,
  note      = {ACM Press, {ISBN} 978-1-4503-2243-0}
}

@InProceedings{Settle:2013,
  author    = {Amber Settle},
  title     = {{Reaching the `Aha!' Moment: Web Development as a
                Motivator for Recursion}},
  booktitle = {{Proceedings of the 14th Annual ACM SIGITE
                Conference on Information Technology Education}},
  pages     = {69--70},
  year      = 2013,
  address   = {Orlando, Florida, USA},
  month     = oct
}
